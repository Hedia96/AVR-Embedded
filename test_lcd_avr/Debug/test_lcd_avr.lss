
test_lcd_avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00001c96  00001d2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080006c  0080006c  00001d36  2**0
                  ALLOC
  3 .stab         00001734  00000000  00000000  00001d38  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cb0  00000000  00000000  0000346c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000411c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000425c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000043cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006015  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00006f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00007cb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00007e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000809d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000886b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e9       	ldi	r30, 0x96	; 150
      68:	fc e1       	ldi	r31, 0x1C	; 28
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 36       	cpi	r26, 0x6D	; 109
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <main>
      8a:	0c 94 49 0e 	jmp	0x1c92	; 0x1c92 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 12 0e 	jmp	0x1c24	; 0x1c24 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e6       	ldi	r26, 0x64	; 100
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2e 0e 	jmp	0x1c5c	; 0x1c5c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1e 0e 	jmp	0x1c3c	; 0x1c3c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1e 0e 	jmp	0x1c3c	; 0x1c3c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 12 0e 	jmp	0x1c24	; 0x1c24 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e6       	ldi	r24, 0x64	; 100
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2e 0e 	jmp	0x1c5c	; 0x1c5c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1e 0e 	jmp	0x1c3c	; 0x1c3c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 1e 0e 	jmp	0x1c3c	; 0x1c3c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 1e 0e 	jmp	0x1c3c	; 0x1c3c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 22 0e 	jmp	0x1c44	; 0x1c44 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 3e 0e 	jmp	0x1c7c	; 0x1c7c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_VInit>:
 * RETURN     :N/A
 */


void GPIO_VInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

  DDRA=CONC_8BITS(GPIO_PORTA_PIN0_Dir,GPIO_PORTA_PIN1_Dir,GPIO_PORTA_PIN2_Dir,GPIO_PORTA_PIN3_Dir,GPIO_PORTA_PIN4_Dir,GPIO_PORTA_PIN5_Dir,GPIO_PORTA_PIN6_Dir,GPIO_PORTA_PIN7_Dir);
     b4e:	ea e3       	ldi	r30, 0x3A	; 58
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	8f ef       	ldi	r24, 0xFF	; 255
     b54:	80 83       	st	Z, r24
  DDRB=CONC_8BITS(GPIO_PORTB_PIN0_Dir,GPIO_PORTB_PIN1_Dir,GPIO_PORTB_PIN2_Dir,GPIO_PORTB_PIN3_Dir,GPIO_PORTB_PIN4_Dir,GPIO_PORTB_PIN5_Dir,GPIO_PORTB_PIN6_Dir,GPIO_PORTB_PIN7_Dir);
     b56:	e7 e3       	ldi	r30, 0x37	; 55
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	8f ef       	ldi	r24, 0xFF	; 255
     b5c:	80 83       	st	Z, r24
  DDRC=CONC_8BITS(GPIO_PORTC_PIN0_Dir,GPIO_PORTC_PIN1_Dir,GPIO_PORTC_PIN2_Dir,GPIO_PORTC_PIN3_Dir,GPIO_PORTC_PIN4_Dir,GPIO_PORTC_PIN5_Dir,GPIO_PORTC_PIN6_Dir,GPIO_PORTC_PIN7_Dir);
     b5e:	e4 e3       	ldi	r30, 0x34	; 52
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	8f ef       	ldi	r24, 0xFF	; 255
     b64:	80 83       	st	Z, r24
  DDRD=CONC_8BITS(GPIO_PORTD_PIN0_Dir,GPIO_PORTD_PIN1_Dir,GPIO_PORTD_PIN2_Dir,GPIO_PORTD_PIN3_Dir,GPIO_PORTD_PIN4_Dir,GPIO_PORTD_PIN5_Dir,GPIO_PORTD_PIN6_Dir,GPIO_PORTD_PIN7_Dir);
     b66:	e1 e3       	ldi	r30, 0x31	; 49
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	8f ef       	ldi	r24, 0xFF	; 255
     b6c:	80 83       	st	Z, r24


  PORTA=CONC_8BITS(GPIO_PORTA_PIN0_VALUE,GPIO_PORTA_PIN1_VALUE,GPIO_PORTA_PIN2_VALUE,GPIO_PORTA_PIN3_VALUE,GPIO_PORTA_PIN4_VALUE,GPIO_PORTA_PIN5_VALUE,GPIO_PORTA_PIN6_VALUE,GPIO_PORTA_PIN7_VALUE);
     b6e:	eb e3       	ldi	r30, 0x3B	; 59
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	10 82       	st	Z, r1
  PORTB=CONC_8BITS(GPIO_PORTB_PIN0_VALUE,GPIO_PORTB_PIN1_VALUE,GPIO_PORTB_PIN2_VALUE,GPIO_PORTB_PIN3_VALUE,GPIO_PORTB_PIN4_VALUE,GPIO_PORTB_PIN5_VALUE,GPIO_PORTB_PIN6_VALUE,GPIO_PORTB_PIN7_VALUE);
     b74:	e8 e3       	ldi	r30, 0x38	; 56
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	10 82       	st	Z, r1
  PORTC=CONC_8BITS(GPIO_PORTC_PIN0_VALUE,GPIO_PORTC_PIN1_VALUE,GPIO_PORTC_PIN2_VALUE,GPIO_PORTC_PIN3_VALUE,GPIO_PORTC_PIN4_VALUE,GPIO_PORTC_PIN5_VALUE,GPIO_PORTC_PIN6_VALUE,GPIO_PORTC_PIN7_VALUE);
     b7a:	e5 e3       	ldi	r30, 0x35	; 53
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	10 82       	st	Z, r1
  PORTD=CONC_8BITS(GPIO_PORTD_PIN0_VALUE,GPIO_PORTD_PIN1_VALUE,GPIO_PORTD_PIN2_VALUE,GPIO_PORTD_PIN3_VALUE,GPIO_PORTD_PIN4_VALUE,GPIO_PORTD_PIN5_VALUE,GPIO_PORTD_PIN6_VALUE,GPIO_PORTD_PIN7_VALUE);
     b80:	e2 e3       	ldi	r30, 0x32	; 50
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	10 82       	st	Z, r1

}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	08 95       	ret

00000b8c <GPIO_u8SetPinDirectionType>:
 *  RETURN      : ERROR STATE INDCATES OR VERIFIES THE STATE OF FUNCTION
 *
 */

u8 GPIO_u8SetPinDirectionType(u8 Copy_u8PinNb,u8 Copy_u8Direction)
{
     b8c:	df 93       	push	r29
     b8e:	cf 93       	push	r28
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
     b94:	27 97       	sbiw	r28, 0x07	; 7
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	f8 94       	cli
     b9a:	de bf       	out	0x3e, r29	; 62
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	cd bf       	out	0x3d, r28	; 61
     ba0:	8c 83       	std	Y+4, r24	; 0x04
     ba2:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8Error=ERROR_NO;
     ba4:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_u8PortNb ;
	u8 Local_u8PinNb;


	if((Copy_u8PinNb >=DIO_MAXPINNB)|| ((Copy_u8Direction != GPIO_PIN_OUTPUT )&& (Copy_u8Direction != GPIO_PIN_INPUT)))
     ba6:	8c 81       	ldd	r24, Y+4	; 0x04
     ba8:	80 32       	cpi	r24, 0x20	; 32
     baa:	30 f4       	brcc	.+12     	; 0xbb8 <GPIO_u8SetPinDirectionType+0x2c>
     bac:	8d 81       	ldd	r24, Y+5	; 0x05
     bae:	81 30       	cpi	r24, 0x01	; 1
     bb0:	31 f0       	breq	.+12     	; 0xbbe <GPIO_u8SetPinDirectionType+0x32>
     bb2:	8d 81       	ldd	r24, Y+5	; 0x05
     bb4:	88 23       	and	r24, r24
     bb6:	19 f0       	breq	.+6      	; 0xbbe <GPIO_u8SetPinDirectionType+0x32>
	{/*condition of error */
		/*((u8PinNB >=DIO_MAXPINNB)||( Copy_u8Direction !=DIO_OUTPUT && Copy_u8Direction !=DIO_INPUT))*/
		//more readable
		Local_u8Error=ERROR_NOK;
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	8b 83       	std	Y+3, r24	; 0x03
     bbc:	d9 c0       	rjmp	.+434    	; 0xd70 <GPIO_u8SetPinDirectionType+0x1e4>
	}
	else
	{      /*get the number of port and number of pin number*/
			//u8 Local_u8PortNb = u8PinNB /8;
			// not magic number
			 Local_u8PortNb = Copy_u8PinNb /NUMBER_PINS_IN_PORT;
     bbe:	8c 81       	ldd	r24, Y+4	; 0x04
     bc0:	86 95       	lsr	r24
     bc2:	86 95       	lsr	r24
     bc4:	86 95       	lsr	r24
     bc6:	8a 83       	std	Y+2, r24	; 0x02
			 Local_u8PinNb  = Copy_u8PinNb % NUMBER_PINS_IN_PORT;
     bc8:	8c 81       	ldd	r24, Y+4	; 0x04
     bca:	87 70       	andi	r24, 0x07	; 7
     bcc:	89 83       	std	Y+1, r24	; 0x01
			// put direction in
		switch(Local_u8PortNb)
     bce:	8a 81       	ldd	r24, Y+2	; 0x02
     bd0:	28 2f       	mov	r18, r24
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	3f 83       	std	Y+7, r19	; 0x07
     bd6:	2e 83       	std	Y+6, r18	; 0x06
     bd8:	8e 81       	ldd	r24, Y+6	; 0x06
     bda:	9f 81       	ldd	r25, Y+7	; 0x07
     bdc:	81 30       	cpi	r24, 0x01	; 1
     bde:	91 05       	cpc	r25, r1
     be0:	09 f4       	brne	.+2      	; 0xbe4 <GPIO_u8SetPinDirectionType+0x58>
     be2:	43 c0       	rjmp	.+134    	; 0xc6a <GPIO_u8SetPinDirectionType+0xde>
     be4:	2e 81       	ldd	r18, Y+6	; 0x06
     be6:	3f 81       	ldd	r19, Y+7	; 0x07
     be8:	22 30       	cpi	r18, 0x02	; 2
     bea:	31 05       	cpc	r19, r1
     bec:	2c f4       	brge	.+10     	; 0xbf8 <GPIO_u8SetPinDirectionType+0x6c>
     bee:	8e 81       	ldd	r24, Y+6	; 0x06
     bf0:	9f 81       	ldd	r25, Y+7	; 0x07
     bf2:	00 97       	sbiw	r24, 0x00	; 0
     bf4:	71 f0       	breq	.+28     	; 0xc12 <GPIO_u8SetPinDirectionType+0x86>
     bf6:	bc c0       	rjmp	.+376    	; 0xd70 <GPIO_u8SetPinDirectionType+0x1e4>
     bf8:	2e 81       	ldd	r18, Y+6	; 0x06
     bfa:	3f 81       	ldd	r19, Y+7	; 0x07
     bfc:	22 30       	cpi	r18, 0x02	; 2
     bfe:	31 05       	cpc	r19, r1
     c00:	09 f4       	brne	.+2      	; 0xc04 <GPIO_u8SetPinDirectionType+0x78>
     c02:	5f c0       	rjmp	.+190    	; 0xcc2 <GPIO_u8SetPinDirectionType+0x136>
     c04:	8e 81       	ldd	r24, Y+6	; 0x06
     c06:	9f 81       	ldd	r25, Y+7	; 0x07
     c08:	83 30       	cpi	r24, 0x03	; 3
     c0a:	91 05       	cpc	r25, r1
     c0c:	09 f4       	brne	.+2      	; 0xc10 <GPIO_u8SetPinDirectionType+0x84>
     c0e:	85 c0       	rjmp	.+266    	; 0xd1a <GPIO_u8SetPinDirectionType+0x18e>
     c10:	af c0       	rjmp	.+350    	; 0xd70 <GPIO_u8SetPinDirectionType+0x1e4>
		  {
			case GPIO_PORTA:
			ASSIGN_BIT(DDRA,Local_u8PinNb,Copy_u8Direction);
     c12:	8d 81       	ldd	r24, Y+5	; 0x05
     c14:	81 30       	cpi	r24, 0x01	; 1
     c16:	a1 f4       	brne	.+40     	; 0xc40 <GPIO_u8SetPinDirectionType+0xb4>
     c18:	aa e3       	ldi	r26, 0x3A	; 58
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	ea e3       	ldi	r30, 0x3A	; 58
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	48 2f       	mov	r20, r24
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	28 2f       	mov	r18, r24
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	02 2e       	mov	r0, r18
     c30:	02 c0       	rjmp	.+4      	; 0xc36 <GPIO_u8SetPinDirectionType+0xaa>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	0a 94       	dec	r0
     c38:	e2 f7       	brpl	.-8      	; 0xc32 <GPIO_u8SetPinDirectionType+0xa6>
     c3a:	84 2b       	or	r24, r20
     c3c:	8c 93       	st	X, r24
     c3e:	98 c0       	rjmp	.+304    	; 0xd70 <GPIO_u8SetPinDirectionType+0x1e4>
     c40:	aa e3       	ldi	r26, 0x3A	; 58
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	ea e3       	ldi	r30, 0x3A	; 58
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	48 2f       	mov	r20, r24
     c4c:	89 81       	ldd	r24, Y+1	; 0x01
     c4e:	28 2f       	mov	r18, r24
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	02 2e       	mov	r0, r18
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <GPIO_u8SetPinDirectionType+0xd2>
     c5a:	88 0f       	add	r24, r24
     c5c:	99 1f       	adc	r25, r25
     c5e:	0a 94       	dec	r0
     c60:	e2 f7       	brpl	.-8      	; 0xc5a <GPIO_u8SetPinDirectionType+0xce>
     c62:	80 95       	com	r24
     c64:	84 23       	and	r24, r20
     c66:	8c 93       	st	X, r24
     c68:	83 c0       	rjmp	.+262    	; 0xd70 <GPIO_u8SetPinDirectionType+0x1e4>
//			SET_BIT(DDRA,Local_u8PinNb);
				break;
			case GPIO_PORTB:
				ASSIGN_BIT(DDRB,Local_u8PinNb,Copy_u8Direction);
     c6a:	8d 81       	ldd	r24, Y+5	; 0x05
     c6c:	81 30       	cpi	r24, 0x01	; 1
     c6e:	a1 f4       	brne	.+40     	; 0xc98 <GPIO_u8SetPinDirectionType+0x10c>
     c70:	a7 e3       	ldi	r26, 0x37	; 55
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	e7 e3       	ldi	r30, 0x37	; 55
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	48 2f       	mov	r20, r24
     c7c:	89 81       	ldd	r24, Y+1	; 0x01
     c7e:	28 2f       	mov	r18, r24
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	02 2e       	mov	r0, r18
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <GPIO_u8SetPinDirectionType+0x102>
     c8a:	88 0f       	add	r24, r24
     c8c:	99 1f       	adc	r25, r25
     c8e:	0a 94       	dec	r0
     c90:	e2 f7       	brpl	.-8      	; 0xc8a <GPIO_u8SetPinDirectionType+0xfe>
     c92:	84 2b       	or	r24, r20
     c94:	8c 93       	st	X, r24
     c96:	6c c0       	rjmp	.+216    	; 0xd70 <GPIO_u8SetPinDirectionType+0x1e4>
     c98:	a7 e3       	ldi	r26, 0x37	; 55
     c9a:	b0 e0       	ldi	r27, 0x00	; 0
     c9c:	e7 e3       	ldi	r30, 0x37	; 55
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	48 2f       	mov	r20, r24
     ca4:	89 81       	ldd	r24, Y+1	; 0x01
     ca6:	28 2f       	mov	r18, r24
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	02 2e       	mov	r0, r18
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <GPIO_u8SetPinDirectionType+0x12a>
     cb2:	88 0f       	add	r24, r24
     cb4:	99 1f       	adc	r25, r25
     cb6:	0a 94       	dec	r0
     cb8:	e2 f7       	brpl	.-8      	; 0xcb2 <GPIO_u8SetPinDirectionType+0x126>
     cba:	80 95       	com	r24
     cbc:	84 23       	and	r24, r20
     cbe:	8c 93       	st	X, r24
     cc0:	57 c0       	rjmp	.+174    	; 0xd70 <GPIO_u8SetPinDirectionType+0x1e4>
				break;
			case GPIO_PORTC:
				ASSIGN_BIT(DDRC,Local_u8PinNb,Copy_u8Direction);
     cc2:	8d 81       	ldd	r24, Y+5	; 0x05
     cc4:	81 30       	cpi	r24, 0x01	; 1
     cc6:	a1 f4       	brne	.+40     	; 0xcf0 <GPIO_u8SetPinDirectionType+0x164>
     cc8:	a4 e3       	ldi	r26, 0x34	; 52
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	e4 e3       	ldi	r30, 0x34	; 52
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	48 2f       	mov	r20, r24
     cd4:	89 81       	ldd	r24, Y+1	; 0x01
     cd6:	28 2f       	mov	r18, r24
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	02 2e       	mov	r0, r18
     ce0:	02 c0       	rjmp	.+4      	; 0xce6 <GPIO_u8SetPinDirectionType+0x15a>
     ce2:	88 0f       	add	r24, r24
     ce4:	99 1f       	adc	r25, r25
     ce6:	0a 94       	dec	r0
     ce8:	e2 f7       	brpl	.-8      	; 0xce2 <GPIO_u8SetPinDirectionType+0x156>
     cea:	84 2b       	or	r24, r20
     cec:	8c 93       	st	X, r24
     cee:	40 c0       	rjmp	.+128    	; 0xd70 <GPIO_u8SetPinDirectionType+0x1e4>
     cf0:	a4 e3       	ldi	r26, 0x34	; 52
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	e4 e3       	ldi	r30, 0x34	; 52
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	48 2f       	mov	r20, r24
     cfc:	89 81       	ldd	r24, Y+1	; 0x01
     cfe:	28 2f       	mov	r18, r24
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	02 2e       	mov	r0, r18
     d08:	02 c0       	rjmp	.+4      	; 0xd0e <GPIO_u8SetPinDirectionType+0x182>
     d0a:	88 0f       	add	r24, r24
     d0c:	99 1f       	adc	r25, r25
     d0e:	0a 94       	dec	r0
     d10:	e2 f7       	brpl	.-8      	; 0xd0a <GPIO_u8SetPinDirectionType+0x17e>
     d12:	80 95       	com	r24
     d14:	84 23       	and	r24, r20
     d16:	8c 93       	st	X, r24
     d18:	2b c0       	rjmp	.+86     	; 0xd70 <GPIO_u8SetPinDirectionType+0x1e4>
				break;
			case GPIO_PORTD:
				ASSIGN_BIT(DDRD,Local_u8PinNb,Copy_u8Direction);
     d1a:	8d 81       	ldd	r24, Y+5	; 0x05
     d1c:	81 30       	cpi	r24, 0x01	; 1
     d1e:	a1 f4       	brne	.+40     	; 0xd48 <GPIO_u8SetPinDirectionType+0x1bc>
     d20:	a1 e3       	ldi	r26, 0x31	; 49
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	e1 e3       	ldi	r30, 0x31	; 49
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	48 2f       	mov	r20, r24
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
     d2e:	28 2f       	mov	r18, r24
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	02 2e       	mov	r0, r18
     d38:	02 c0       	rjmp	.+4      	; 0xd3e <GPIO_u8SetPinDirectionType+0x1b2>
     d3a:	88 0f       	add	r24, r24
     d3c:	99 1f       	adc	r25, r25
     d3e:	0a 94       	dec	r0
     d40:	e2 f7       	brpl	.-8      	; 0xd3a <GPIO_u8SetPinDirectionType+0x1ae>
     d42:	84 2b       	or	r24, r20
     d44:	8c 93       	st	X, r24
     d46:	14 c0       	rjmp	.+40     	; 0xd70 <GPIO_u8SetPinDirectionType+0x1e4>
     d48:	a1 e3       	ldi	r26, 0x31	; 49
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	e1 e3       	ldi	r30, 0x31	; 49
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	48 2f       	mov	r20, r24
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	02 2e       	mov	r0, r18
     d60:	02 c0       	rjmp	.+4      	; 0xd66 <GPIO_u8SetPinDirectionType+0x1da>
     d62:	88 0f       	add	r24, r24
     d64:	99 1f       	adc	r25, r25
     d66:	0a 94       	dec	r0
     d68:	e2 f7       	brpl	.-8      	; 0xd62 <GPIO_u8SetPinDirectionType+0x1d6>
     d6a:	80 95       	com	r24
     d6c:	84 23       	and	r24, r20
     d6e:	8c 93       	st	X, r24
				break;
			//default:u8Error =ERROR_NOK;

			}
     }
	return Local_u8Error;
     d70:	8b 81       	ldd	r24, Y+3	; 0x03


}
     d72:	27 96       	adiw	r28, 0x07	; 7
     d74:	0f b6       	in	r0, 0x3f	; 63
     d76:	f8 94       	cli
     d78:	de bf       	out	0x3e, r29	; 62
     d7a:	0f be       	out	0x3f, r0	; 63
     d7c:	cd bf       	out	0x3d, r28	; 61
     d7e:	cf 91       	pop	r28
     d80:	df 91       	pop	r29
     d82:	08 95       	ret

00000d84 <GPIO_u8SetPinValue>:
 * OUTPUT     : return the state  of that function ERRor_NO if all thing is right or ERROR_NOK if something wrong
 * 				      its type
 * INPUT      : PinNb and this value
 */
u8 GPIO_u8SetPinValue(u8 Copy_u8PinNb,u8 Copy_u8Value)
{
     d84:	df 93       	push	r29
     d86:	cf 93       	push	r28
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
     d8c:	27 97       	sbiw	r28, 0x07	; 7
     d8e:	0f b6       	in	r0, 0x3f	; 63
     d90:	f8 94       	cli
     d92:	de bf       	out	0x3e, r29	; 62
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	cd bf       	out	0x3d, r28	; 61
     d98:	8c 83       	std	Y+4, r24	; 0x04
     d9a:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8Error=ERROR_NO;
     d9c:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_u8PortNb;
	u8 Local_u8PinNb;
  if((Copy_u8PinNb >=DIO_MAXPINNB)|| ((Copy_u8Value !=GPIO_PIN_LOW) && (Copy_u8Value!=GPIO_PIN_HIGH) ))
     d9e:	8c 81       	ldd	r24, Y+4	; 0x04
     da0:	80 32       	cpi	r24, 0x20	; 32
     da2:	30 f4       	brcc	.+12     	; 0xdb0 <GPIO_u8SetPinValue+0x2c>
     da4:	8d 81       	ldd	r24, Y+5	; 0x05
     da6:	88 23       	and	r24, r24
     da8:	31 f0       	breq	.+12     	; 0xdb6 <GPIO_u8SetPinValue+0x32>
     daa:	8d 81       	ldd	r24, Y+5	; 0x05
     dac:	81 30       	cpi	r24, 0x01	; 1
     dae:	19 f0       	breq	.+6      	; 0xdb6 <GPIO_u8SetPinValue+0x32>
		{
			Local_u8Error=ERROR_NOK;
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	8b 83       	std	Y+3, r24	; 0x03
     db4:	dc c0       	rjmp	.+440    	; 0xf6e <GPIO_u8SetPinValue+0x1ea>
		}
		else
		{      /*get the number of port and number of pin number*/
				//u8 Local_u8PortNb = u8PinNB /8;
				// not magic number
				Local_u8PortNb = Copy_u8PinNb /	NUMBER_PINS_IN_PORT;
     db6:	8c 81       	ldd	r24, Y+4	; 0x04
     db8:	86 95       	lsr	r24
     dba:	86 95       	lsr	r24
     dbc:	86 95       	lsr	r24
     dbe:	8a 83       	std	Y+2, r24	; 0x02
				Local_u8PinNb=Copy_u8PinNb % NUMBER_PINS_IN_PORT;
     dc0:	8c 81       	ldd	r24, Y+4	; 0x04
     dc2:	87 70       	andi	r24, 0x07	; 7
     dc4:	89 83       	std	Y+1, r24	; 0x01
				// put direction in
			switch(Local_u8PortNb)
     dc6:	8a 81       	ldd	r24, Y+2	; 0x02
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	3f 83       	std	Y+7, r19	; 0x07
     dce:	2e 83       	std	Y+6, r18	; 0x06
     dd0:	8e 81       	ldd	r24, Y+6	; 0x06
     dd2:	9f 81       	ldd	r25, Y+7	; 0x07
     dd4:	81 30       	cpi	r24, 0x01	; 1
     dd6:	91 05       	cpc	r25, r1
     dd8:	09 f4       	brne	.+2      	; 0xddc <GPIO_u8SetPinValue+0x58>
     dda:	43 c0       	rjmp	.+134    	; 0xe62 <GPIO_u8SetPinValue+0xde>
     ddc:	2e 81       	ldd	r18, Y+6	; 0x06
     dde:	3f 81       	ldd	r19, Y+7	; 0x07
     de0:	22 30       	cpi	r18, 0x02	; 2
     de2:	31 05       	cpc	r19, r1
     de4:	2c f4       	brge	.+10     	; 0xdf0 <GPIO_u8SetPinValue+0x6c>
     de6:	8e 81       	ldd	r24, Y+6	; 0x06
     de8:	9f 81       	ldd	r25, Y+7	; 0x07
     dea:	00 97       	sbiw	r24, 0x00	; 0
     dec:	71 f0       	breq	.+28     	; 0xe0a <GPIO_u8SetPinValue+0x86>
     dee:	bd c0       	rjmp	.+378    	; 0xf6a <GPIO_u8SetPinValue+0x1e6>
     df0:	2e 81       	ldd	r18, Y+6	; 0x06
     df2:	3f 81       	ldd	r19, Y+7	; 0x07
     df4:	22 30       	cpi	r18, 0x02	; 2
     df6:	31 05       	cpc	r19, r1
     df8:	09 f4       	brne	.+2      	; 0xdfc <GPIO_u8SetPinValue+0x78>
     dfa:	5f c0       	rjmp	.+190    	; 0xeba <GPIO_u8SetPinValue+0x136>
     dfc:	8e 81       	ldd	r24, Y+6	; 0x06
     dfe:	9f 81       	ldd	r25, Y+7	; 0x07
     e00:	83 30       	cpi	r24, 0x03	; 3
     e02:	91 05       	cpc	r25, r1
     e04:	09 f4       	brne	.+2      	; 0xe08 <GPIO_u8SetPinValue+0x84>
     e06:	85 c0       	rjmp	.+266    	; 0xf12 <GPIO_u8SetPinValue+0x18e>
     e08:	b0 c0       	rjmp	.+352    	; 0xf6a <GPIO_u8SetPinValue+0x1e6>
			  {
				case GPIO_PORTA:
					ASSIGN_BIT(PORTA,Local_u8PinNb,Copy_u8Value);
     e0a:	8d 81       	ldd	r24, Y+5	; 0x05
     e0c:	81 30       	cpi	r24, 0x01	; 1
     e0e:	a1 f4       	brne	.+40     	; 0xe38 <GPIO_u8SetPinValue+0xb4>
     e10:	ab e3       	ldi	r26, 0x3B	; 59
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	eb e3       	ldi	r30, 0x3B	; 59
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	48 2f       	mov	r20, r24
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
     e1e:	28 2f       	mov	r18, r24
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	02 2e       	mov	r0, r18
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <GPIO_u8SetPinValue+0xaa>
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	0a 94       	dec	r0
     e30:	e2 f7       	brpl	.-8      	; 0xe2a <GPIO_u8SetPinValue+0xa6>
     e32:	84 2b       	or	r24, r20
     e34:	8c 93       	st	X, r24
     e36:	9b c0       	rjmp	.+310    	; 0xf6e <GPIO_u8SetPinValue+0x1ea>
     e38:	ab e3       	ldi	r26, 0x3B	; 59
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	eb e3       	ldi	r30, 0x3B	; 59
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	48 2f       	mov	r20, r24
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	02 2e       	mov	r0, r18
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <GPIO_u8SetPinValue+0xd2>
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	0a 94       	dec	r0
     e58:	e2 f7       	brpl	.-8      	; 0xe52 <GPIO_u8SetPinValue+0xce>
     e5a:	80 95       	com	r24
     e5c:	84 23       	and	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	86 c0       	rjmp	.+268    	; 0xf6e <GPIO_u8SetPinValue+0x1ea>
//					SET_BIT(PORTA,Local_u8PinNb);
					break;
				case GPIO_PORTB:
					ASSIGN_BIT(PORTB,Local_u8PinNb,Copy_u8Value);
     e62:	8d 81       	ldd	r24, Y+5	; 0x05
     e64:	81 30       	cpi	r24, 0x01	; 1
     e66:	a1 f4       	brne	.+40     	; 0xe90 <GPIO_u8SetPinValue+0x10c>
     e68:	a8 e3       	ldi	r26, 0x38	; 56
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e8 e3       	ldi	r30, 0x38	; 56
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	48 2f       	mov	r20, r24
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	02 2e       	mov	r0, r18
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <GPIO_u8SetPinValue+0x102>
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	0a 94       	dec	r0
     e88:	e2 f7       	brpl	.-8      	; 0xe82 <GPIO_u8SetPinValue+0xfe>
     e8a:	84 2b       	or	r24, r20
     e8c:	8c 93       	st	X, r24
     e8e:	6f c0       	rjmp	.+222    	; 0xf6e <GPIO_u8SetPinValue+0x1ea>
     e90:	a8 e3       	ldi	r26, 0x38	; 56
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e8 e3       	ldi	r30, 0x38	; 56
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	48 2f       	mov	r20, r24
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	02 2e       	mov	r0, r18
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <GPIO_u8SetPinValue+0x12a>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	0a 94       	dec	r0
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <GPIO_u8SetPinValue+0x126>
     eb2:	80 95       	com	r24
     eb4:	84 23       	and	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	5a c0       	rjmp	.+180    	; 0xf6e <GPIO_u8SetPinValue+0x1ea>
					break;
				case GPIO_PORTC:
					ASSIGN_BIT(PORTC,Local_u8PinNb,Copy_u8Value);
     eba:	8d 81       	ldd	r24, Y+5	; 0x05
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	a1 f4       	brne	.+40     	; 0xee8 <GPIO_u8SetPinValue+0x164>
     ec0:	a5 e3       	ldi	r26, 0x35	; 53
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e5 e3       	ldi	r30, 0x35	; 53
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	48 2f       	mov	r20, r24
     ecc:	89 81       	ldd	r24, Y+1	; 0x01
     ece:	28 2f       	mov	r18, r24
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	02 2e       	mov	r0, r18
     ed8:	02 c0       	rjmp	.+4      	; 0xede <GPIO_u8SetPinValue+0x15a>
     eda:	88 0f       	add	r24, r24
     edc:	99 1f       	adc	r25, r25
     ede:	0a 94       	dec	r0
     ee0:	e2 f7       	brpl	.-8      	; 0xeda <GPIO_u8SetPinValue+0x156>
     ee2:	84 2b       	or	r24, r20
     ee4:	8c 93       	st	X, r24
     ee6:	43 c0       	rjmp	.+134    	; 0xf6e <GPIO_u8SetPinValue+0x1ea>
     ee8:	a5 e3       	ldi	r26, 0x35	; 53
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e5 e3       	ldi	r30, 0x35	; 53
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	48 2f       	mov	r20, r24
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	28 2f       	mov	r18, r24
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	02 2e       	mov	r0, r18
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <GPIO_u8SetPinValue+0x182>
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	0a 94       	dec	r0
     f08:	e2 f7       	brpl	.-8      	; 0xf02 <GPIO_u8SetPinValue+0x17e>
     f0a:	80 95       	com	r24
     f0c:	84 23       	and	r24, r20
     f0e:	8c 93       	st	X, r24
     f10:	2e c0       	rjmp	.+92     	; 0xf6e <GPIO_u8SetPinValue+0x1ea>
					break;
				case GPIO_PORTD:
					ASSIGN_BIT(PORTD,Local_u8PinNb,Copy_u8Value);
     f12:	8d 81       	ldd	r24, Y+5	; 0x05
     f14:	81 30       	cpi	r24, 0x01	; 1
     f16:	a1 f4       	brne	.+40     	; 0xf40 <GPIO_u8SetPinValue+0x1bc>
     f18:	a2 e3       	ldi	r26, 0x32	; 50
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e2 e3       	ldi	r30, 0x32	; 50
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	48 2f       	mov	r20, r24
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	28 2f       	mov	r18, r24
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	02 2e       	mov	r0, r18
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <GPIO_u8SetPinValue+0x1b2>
     f32:	88 0f       	add	r24, r24
     f34:	99 1f       	adc	r25, r25
     f36:	0a 94       	dec	r0
     f38:	e2 f7       	brpl	.-8      	; 0xf32 <GPIO_u8SetPinValue+0x1ae>
     f3a:	84 2b       	or	r24, r20
     f3c:	8c 93       	st	X, r24
     f3e:	17 c0       	rjmp	.+46     	; 0xf6e <GPIO_u8SetPinValue+0x1ea>
     f40:	a2 e3       	ldi	r26, 0x32	; 50
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e2 e3       	ldi	r30, 0x32	; 50
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	48 2f       	mov	r20, r24
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	02 2e       	mov	r0, r18
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <GPIO_u8SetPinValue+0x1da>
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	0a 94       	dec	r0
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <GPIO_u8SetPinValue+0x1d6>
     f62:	80 95       	com	r24
     f64:	84 23       	and	r24, r20
     f66:	8c 93       	st	X, r24
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <GPIO_u8SetPinValue+0x1ea>
					break;
				default:
					Local_u8Error =ERROR_NOK;
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	8b 83       	std	Y+3, r24	; 0x03

				}
	     }
		return Local_u8Error;
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03


}
     f70:	27 96       	adiw	r28, 0x07	; 7
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	f8 94       	cli
     f76:	de bf       	out	0x3e, r29	; 62
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	cd bf       	out	0x3d, r28	; 61
     f7c:	cf 91       	pop	r28
     f7e:	df 91       	pop	r29
     f80:	08 95       	ret

00000f82 <GPIO_u8GetPinValue>:
 * INPUT        :Copy_u8PinNb,u8PtrToValue
 * OUTPUT       : ERROR STATE
 */

u8 GPIO_u8GetPinValue(u8 Copy_u8PinNb,u8* u8PtrToValue)
{
     f82:	df 93       	push	r29
     f84:	cf 93       	push	r28
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
     f8a:	28 97       	sbiw	r28, 0x08	; 8
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	f8 94       	cli
     f90:	de bf       	out	0x3e, r29	; 62
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	cd bf       	out	0x3d, r28	; 61
     f96:	8c 83       	std	Y+4, r24	; 0x04
     f98:	7e 83       	std	Y+6, r23	; 0x06
     f9a:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8Error=ERROR_NO;
     f9c:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_u8PortNb ;
	u8 Local_u8PinNb;
	if(Copy_u8PinNb < DIO_MAXPINNB && u8PtrToValue !=NULL )
     f9e:	8c 81       	ldd	r24, Y+4	; 0x04
     fa0:	80 32       	cpi	r24, 0x20	; 32
     fa2:	08 f0       	brcs	.+2      	; 0xfa6 <GPIO_u8GetPinValue+0x24>
     fa4:	b2 c0       	rjmp	.+356    	; 0x110a <GPIO_u8GetPinValue+0x188>
     fa6:	8d 81       	ldd	r24, Y+5	; 0x05
     fa8:	9e 81       	ldd	r25, Y+6	; 0x06
     faa:	00 97       	sbiw	r24, 0x00	; 0
     fac:	09 f4       	brne	.+2      	; 0xfb0 <GPIO_u8GetPinValue+0x2e>
     fae:	ad c0       	rjmp	.+346    	; 0x110a <GPIO_u8GetPinValue+0x188>
		{
		               /*get the number of port and number of pin number*/
						//u8 Local_u8PortNb = u8PinNB /8;
						// not magic number
						Local_u8PortNb = Copy_u8PinNb /	NUMBER_PINS_IN_PORT;
     fb0:	8c 81       	ldd	r24, Y+4	; 0x04
     fb2:	86 95       	lsr	r24
     fb4:	86 95       	lsr	r24
     fb6:	86 95       	lsr	r24
     fb8:	8a 83       	std	Y+2, r24	; 0x02
						Local_u8PinNb=Copy_u8PinNb % NUMBER_PINS_IN_PORT;
     fba:	8c 81       	ldd	r24, Y+4	; 0x04
     fbc:	87 70       	andi	r24, 0x07	; 7
     fbe:	89 83       	std	Y+1, r24	; 0x01
						// put direction in
						switch(Local_u8PortNb)
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	38 87       	std	Y+8, r19	; 0x08
     fc8:	2f 83       	std	Y+7, r18	; 0x07
     fca:	4f 81       	ldd	r20, Y+7	; 0x07
     fcc:	58 85       	ldd	r21, Y+8	; 0x08
     fce:	41 30       	cpi	r20, 0x01	; 1
     fd0:	51 05       	cpc	r21, r1
     fd2:	c1 f1       	breq	.+112    	; 0x1044 <GPIO_u8GetPinValue+0xc2>
     fd4:	8f 81       	ldd	r24, Y+7	; 0x07
     fd6:	98 85       	ldd	r25, Y+8	; 0x08
     fd8:	82 30       	cpi	r24, 0x02	; 2
     fda:	91 05       	cpc	r25, r1
     fdc:	34 f4       	brge	.+12     	; 0xfea <GPIO_u8GetPinValue+0x68>
     fde:	2f 81       	ldd	r18, Y+7	; 0x07
     fe0:	38 85       	ldd	r19, Y+8	; 0x08
     fe2:	21 15       	cp	r18, r1
     fe4:	31 05       	cpc	r19, r1
     fe6:	71 f0       	breq	.+28     	; 0x1004 <GPIO_u8GetPinValue+0x82>
     fe8:	8d c0       	rjmp	.+282    	; 0x1104 <GPIO_u8GetPinValue+0x182>
     fea:	4f 81       	ldd	r20, Y+7	; 0x07
     fec:	58 85       	ldd	r21, Y+8	; 0x08
     fee:	42 30       	cpi	r20, 0x02	; 2
     ff0:	51 05       	cpc	r21, r1
     ff2:	09 f4       	brne	.+2      	; 0xff6 <GPIO_u8GetPinValue+0x74>
     ff4:	47 c0       	rjmp	.+142    	; 0x1084 <GPIO_u8GetPinValue+0x102>
     ff6:	8f 81       	ldd	r24, Y+7	; 0x07
     ff8:	98 85       	ldd	r25, Y+8	; 0x08
     ffa:	83 30       	cpi	r24, 0x03	; 3
     ffc:	91 05       	cpc	r25, r1
     ffe:	09 f4       	brne	.+2      	; 0x1002 <GPIO_u8GetPinValue+0x80>
    1000:	61 c0       	rjmp	.+194    	; 0x10c4 <GPIO_u8GetPinValue+0x142>
    1002:	80 c0       	rjmp	.+256    	; 0x1104 <GPIO_u8GetPinValue+0x182>
								  {
									case GPIO_PINA:
								    *(u8PtrToValue)=GET_BIT(PINA,Local_u8PinNb);
    1004:	e9 e3       	ldi	r30, 0x39	; 57
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	48 2f       	mov	r20, r24
    100c:	50 e0       	ldi	r21, 0x00	; 0
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	02 c0       	rjmp	.+4      	; 0x101e <GPIO_u8GetPinValue+0x9c>
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	2a 95       	dec	r18
    1020:	e2 f7       	brpl	.-8      	; 0x101a <GPIO_u8GetPinValue+0x98>
    1022:	9a 01       	movw	r18, r20
    1024:	28 23       	and	r18, r24
    1026:	39 23       	and	r19, r25
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	88 2f       	mov	r24, r24
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	a9 01       	movw	r20, r18
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <GPIO_u8GetPinValue+0xb4>
    1032:	55 95       	asr	r21
    1034:	47 95       	ror	r20
    1036:	8a 95       	dec	r24
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <GPIO_u8GetPinValue+0xb0>
    103a:	ca 01       	movw	r24, r20
    103c:	ed 81       	ldd	r30, Y+5	; 0x05
    103e:	fe 81       	ldd	r31, Y+6	; 0x06
    1040:	80 83       	st	Z, r24
    1042:	65 c0       	rjmp	.+202    	; 0x110e <GPIO_u8GetPinValue+0x18c>
										break;
									case GPIO_PINB:
										*(u8PtrToValue)=GET_BIT(PINB,Local_u8PinNb);
    1044:	e6 e3       	ldi	r30, 0x36	; 54
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	48 2f       	mov	r20, r24
    104c:	50 e0       	ldi	r21, 0x00	; 0
    104e:	89 81       	ldd	r24, Y+1	; 0x01
    1050:	28 2f       	mov	r18, r24
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	02 c0       	rjmp	.+4      	; 0x105e <GPIO_u8GetPinValue+0xdc>
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	2a 95       	dec	r18
    1060:	e2 f7       	brpl	.-8      	; 0x105a <GPIO_u8GetPinValue+0xd8>
    1062:	9a 01       	movw	r18, r20
    1064:	28 23       	and	r18, r24
    1066:	39 23       	and	r19, r25
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	88 2f       	mov	r24, r24
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	a9 01       	movw	r20, r18
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <GPIO_u8GetPinValue+0xf4>
    1072:	55 95       	asr	r21
    1074:	47 95       	ror	r20
    1076:	8a 95       	dec	r24
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <GPIO_u8GetPinValue+0xf0>
    107a:	ca 01       	movw	r24, r20
    107c:	ed 81       	ldd	r30, Y+5	; 0x05
    107e:	fe 81       	ldd	r31, Y+6	; 0x06
    1080:	80 83       	st	Z, r24
    1082:	45 c0       	rjmp	.+138    	; 0x110e <GPIO_u8GetPinValue+0x18c>
										break;
									case GPIO_PINC:
										*(u8PtrToValue)=GET_BIT(PINC,Local_u8PinNb);
    1084:	e3 e3       	ldi	r30, 0x33	; 51
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	48 2f       	mov	r20, r24
    108c:	50 e0       	ldi	r21, 0x00	; 0
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	02 c0       	rjmp	.+4      	; 0x109e <GPIO_u8GetPinValue+0x11c>
    109a:	88 0f       	add	r24, r24
    109c:	99 1f       	adc	r25, r25
    109e:	2a 95       	dec	r18
    10a0:	e2 f7       	brpl	.-8      	; 0x109a <GPIO_u8GetPinValue+0x118>
    10a2:	9a 01       	movw	r18, r20
    10a4:	28 23       	and	r18, r24
    10a6:	39 23       	and	r19, r25
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	88 2f       	mov	r24, r24
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	a9 01       	movw	r20, r18
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <GPIO_u8GetPinValue+0x134>
    10b2:	55 95       	asr	r21
    10b4:	47 95       	ror	r20
    10b6:	8a 95       	dec	r24
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <GPIO_u8GetPinValue+0x130>
    10ba:	ca 01       	movw	r24, r20
    10bc:	ed 81       	ldd	r30, Y+5	; 0x05
    10be:	fe 81       	ldd	r31, Y+6	; 0x06
    10c0:	80 83       	st	Z, r24
    10c2:	25 c0       	rjmp	.+74     	; 0x110e <GPIO_u8GetPinValue+0x18c>
										break;
									case GPIO_PIND:
										*(u8PtrToValue)=GET_BIT(PIND,Local_u8PinNb);
    10c4:	e0 e3       	ldi	r30, 0x30	; 48
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	48 2f       	mov	r20, r24
    10cc:	50 e0       	ldi	r21, 0x00	; 0
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <GPIO_u8GetPinValue+0x15c>
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	2a 95       	dec	r18
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <GPIO_u8GetPinValue+0x158>
    10e2:	9a 01       	movw	r18, r20
    10e4:	28 23       	and	r18, r24
    10e6:	39 23       	and	r19, r25
    10e8:	89 81       	ldd	r24, Y+1	; 0x01
    10ea:	88 2f       	mov	r24, r24
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	a9 01       	movw	r20, r18
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <GPIO_u8GetPinValue+0x174>
    10f2:	55 95       	asr	r21
    10f4:	47 95       	ror	r20
    10f6:	8a 95       	dec	r24
    10f8:	e2 f7       	brpl	.-8      	; 0x10f2 <GPIO_u8GetPinValue+0x170>
    10fa:	ca 01       	movw	r24, r20
    10fc:	ed 81       	ldd	r30, Y+5	; 0x05
    10fe:	fe 81       	ldd	r31, Y+6	; 0x06
    1100:	80 83       	st	Z, r24
    1102:	05 c0       	rjmp	.+10     	; 0x110e <GPIO_u8GetPinValue+0x18c>
										break;
									default:
										Local_u8Error=ERROR_NOK;
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	8b 83       	std	Y+3, r24	; 0x03
    1108:	02 c0       	rjmp	.+4      	; 0x110e <GPIO_u8GetPinValue+0x18c>



		}else
		{
			Local_u8Error=ERROR_NOK;
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	8b 83       	std	Y+3, r24	; 0x03
		}

return Local_u8Error;
    110e:	8b 81       	ldd	r24, Y+3	; 0x03

}
    1110:	28 96       	adiw	r28, 0x08	; 8
    1112:	0f b6       	in	r0, 0x3f	; 63
    1114:	f8 94       	cli
    1116:	de bf       	out	0x3e, r29	; 62
    1118:	0f be       	out	0x3f, r0	; 63
    111a:	cd bf       	out	0x3d, r28	; 61
    111c:	cf 91       	pop	r28
    111e:	df 91       	pop	r29
    1120:	08 95       	ret

00001122 <GPIO_u8SetPortDirection>:
 * RETURN       :ERROR STATE
 */


u8 GPIO_u8SetPortDirection(u8 Copy_u8PortNb, u8 Copy_u8Direction)
{
    1122:	df 93       	push	r29
    1124:	cf 93       	push	r28
    1126:	00 d0       	rcall	.+0      	; 0x1128 <GPIO_u8SetPortDirection+0x6>
    1128:	0f 92       	push	r0
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62
    112e:	8a 83       	std	Y+2, r24	; 0x02
    1130:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Error=ERROR_NO;
    1132:	19 82       	std	Y+1, r1	; 0x01


		if(Copy_u8PortNb==GPIO_DDRA)
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	88 23       	and	r24, r24
    1138:	29 f4       	brne	.+10     	; 0x1144 <GPIO_u8SetPortDirection+0x22>
			DDRA=Copy_u8Direction;
    113a:	ea e3       	ldi	r30, 0x3A	; 58
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	80 83       	st	Z, r24
    1142:	1a c0       	rjmp	.+52     	; 0x1178 <GPIO_u8SetPortDirection+0x56>
		else if(Copy_u8PortNb==GPIO_DDRB)
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	81 30       	cpi	r24, 0x01	; 1
    1148:	29 f4       	brne	.+10     	; 0x1154 <GPIO_u8SetPortDirection+0x32>
			DDRB=Copy_u8Direction;
    114a:	e7 e3       	ldi	r30, 0x37	; 55
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	8b 81       	ldd	r24, Y+3	; 0x03
    1150:	80 83       	st	Z, r24
    1152:	12 c0       	rjmp	.+36     	; 0x1178 <GPIO_u8SetPortDirection+0x56>
		else if(Copy_u8PortNb==GPIO_DDRC)
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	82 30       	cpi	r24, 0x02	; 2
    1158:	29 f4       	brne	.+10     	; 0x1164 <GPIO_u8SetPortDirection+0x42>
			DDRC=Copy_u8Direction;
    115a:	e4 e3       	ldi	r30, 0x34	; 52
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	80 83       	st	Z, r24
    1162:	0a c0       	rjmp	.+20     	; 0x1178 <GPIO_u8SetPortDirection+0x56>
		else if(Copy_u8PortNb==GPIO_DDRD)
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	83 30       	cpi	r24, 0x03	; 3
    1168:	29 f4       	brne	.+10     	; 0x1174 <GPIO_u8SetPortDirection+0x52>
			DDRD=Copy_u8Direction;
    116a:	e1 e3       	ldi	r30, 0x31	; 49
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	80 83       	st	Z, r24
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <GPIO_u8SetPortDirection+0x56>
		else
			Local_u8Error=ERROR_NOK;
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	89 83       	std	Y+1, r24	; 0x01

return Local_u8Error;
    1178:	89 81       	ldd	r24, Y+1	; 0x01
}
    117a:	0f 90       	pop	r0
    117c:	0f 90       	pop	r0
    117e:	0f 90       	pop	r0
    1180:	cf 91       	pop	r28
    1182:	df 91       	pop	r29
    1184:	08 95       	ret

00001186 <GPIO_u8SetPortValue>:
 * ARGUMENTS    : NNUMBER OF THE REGISTER FROM 0:3 AND Copy_u8Value IS HEX NUMBER
 * RETURN       :ERROR STATE
 */

u8 GPIO_u8SetPortValue(u8 Copy_u8PortNb,u8 Copy_u8Value)
{
    1186:	df 93       	push	r29
    1188:	cf 93       	push	r28
    118a:	00 d0       	rcall	.+0      	; 0x118c <GPIO_u8SetPortValue+0x6>
    118c:	00 d0       	rcall	.+0      	; 0x118e <GPIO_u8SetPortValue+0x8>
    118e:	0f 92       	push	r0
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	8a 83       	std	Y+2, r24	; 0x02
    1196:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Error=ERROR_NO;
    1198:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8PortNb)
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	3d 83       	std	Y+5, r19	; 0x05
    11a2:	2c 83       	std	Y+4, r18	; 0x04
    11a4:	8c 81       	ldd	r24, Y+4	; 0x04
    11a6:	9d 81       	ldd	r25, Y+5	; 0x05
    11a8:	81 30       	cpi	r24, 0x01	; 1
    11aa:	91 05       	cpc	r25, r1
    11ac:	d1 f0       	breq	.+52     	; 0x11e2 <GPIO_u8SetPortValue+0x5c>
    11ae:	2c 81       	ldd	r18, Y+4	; 0x04
    11b0:	3d 81       	ldd	r19, Y+5	; 0x05
    11b2:	22 30       	cpi	r18, 0x02	; 2
    11b4:	31 05       	cpc	r19, r1
    11b6:	2c f4       	brge	.+10     	; 0x11c2 <GPIO_u8SetPortValue+0x3c>
    11b8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ba:	9d 81       	ldd	r25, Y+5	; 0x05
    11bc:	00 97       	sbiw	r24, 0x00	; 0
    11be:	61 f0       	breq	.+24     	; 0x11d8 <GPIO_u8SetPortValue+0x52>
    11c0:	1f c0       	rjmp	.+62     	; 0x1200 <GPIO_u8SetPortValue+0x7a>
    11c2:	2c 81       	ldd	r18, Y+4	; 0x04
    11c4:	3d 81       	ldd	r19, Y+5	; 0x05
    11c6:	22 30       	cpi	r18, 0x02	; 2
    11c8:	31 05       	cpc	r19, r1
    11ca:	81 f0       	breq	.+32     	; 0x11ec <GPIO_u8SetPortValue+0x66>
    11cc:	8c 81       	ldd	r24, Y+4	; 0x04
    11ce:	9d 81       	ldd	r25, Y+5	; 0x05
    11d0:	83 30       	cpi	r24, 0x03	; 3
    11d2:	91 05       	cpc	r25, r1
    11d4:	81 f0       	breq	.+32     	; 0x11f6 <GPIO_u8SetPortValue+0x70>
    11d6:	14 c0       	rjmp	.+40     	; 0x1200 <GPIO_u8SetPortValue+0x7a>
	{
	case GPIO_PORTA:
		PORTA=Copy_u8Value;
    11d8:	eb e3       	ldi	r30, 0x3B	; 59
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	80 83       	st	Z, r24
    11e0:	11 c0       	rjmp	.+34     	; 0x1204 <GPIO_u8SetPortValue+0x7e>
		break;
	case GPIO_PORTB:
		PORTA=Copy_u8Value;
    11e2:	eb e3       	ldi	r30, 0x3B	; 59
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	80 83       	st	Z, r24
    11ea:	0c c0       	rjmp	.+24     	; 0x1204 <GPIO_u8SetPortValue+0x7e>
		break;
	case GPIO_PORTC:
			PORTC=Copy_u8Value;
    11ec:	e5 e3       	ldi	r30, 0x35	; 53
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	80 83       	st	Z, r24
    11f4:	07 c0       	rjmp	.+14     	; 0x1204 <GPIO_u8SetPortValue+0x7e>
			break;
	case GPIO_PORTD:
			PORTD=Copy_u8Value;
    11f6:	e2 e3       	ldi	r30, 0x32	; 50
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	80 83       	st	Z, r24
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <GPIO_u8SetPortValue+0x7e>
			break;
	default:
		Local_u8Error=ERROR_NOK;
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	89 83       	std	Y+1, r24	; 0x01
	}
return Local_u8Error;
    1204:	89 81       	ldd	r24, Y+1	; 0x01
}
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	cf 91       	pop	r28
    1212:	df 91       	pop	r29
    1214:	08 95       	ret

00001216 <GPIO_u8GetPortValue>:
 *Description:get Copy_u8Value as whole byte from register PINx read by Micro-controller so it gets
 *Arguments  :number of pinA,B,C,D and the variable should Copy_u8Value returned in it
 *Return     :Error state is ok or no
 */
u8 GPIO_u8GetPortValue(u8 u8PortNB,u8* u8PCopyValue)
{
    1216:	df 93       	push	r29
    1218:	cf 93       	push	r28
    121a:	00 d0       	rcall	.+0      	; 0x121c <GPIO_u8GetPortValue+0x6>
    121c:	00 d0       	rcall	.+0      	; 0x121e <GPIO_u8GetPortValue+0x8>
    121e:	00 d0       	rcall	.+0      	; 0x1220 <GPIO_u8GetPortValue+0xa>
    1220:	cd b7       	in	r28, 0x3d	; 61
    1222:	de b7       	in	r29, 0x3e	; 62
    1224:	8a 83       	std	Y+2, r24	; 0x02
    1226:	7c 83       	std	Y+4, r23	; 0x04
    1228:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Error=ERROR_NO;
    122a:	19 82       	std	Y+1, r1	; 0x01

	switch(u8PortNB)
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	28 2f       	mov	r18, r24
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	3e 83       	std	Y+6, r19	; 0x06
    1234:	2d 83       	std	Y+5, r18	; 0x05
    1236:	8d 81       	ldd	r24, Y+5	; 0x05
    1238:	9e 81       	ldd	r25, Y+6	; 0x06
    123a:	81 30       	cpi	r24, 0x01	; 1
    123c:	91 05       	cpc	r25, r1
    123e:	e1 f0       	breq	.+56     	; 0x1278 <GPIO_u8GetPortValue+0x62>
    1240:	2d 81       	ldd	r18, Y+5	; 0x05
    1242:	3e 81       	ldd	r19, Y+6	; 0x06
    1244:	22 30       	cpi	r18, 0x02	; 2
    1246:	31 05       	cpc	r19, r1
    1248:	2c f4       	brge	.+10     	; 0x1254 <GPIO_u8GetPortValue+0x3e>
    124a:	8d 81       	ldd	r24, Y+5	; 0x05
    124c:	9e 81       	ldd	r25, Y+6	; 0x06
    124e:	00 97       	sbiw	r24, 0x00	; 0
    1250:	61 f0       	breq	.+24     	; 0x126a <GPIO_u8GetPortValue+0x54>
    1252:	27 c0       	rjmp	.+78     	; 0x12a2 <GPIO_u8GetPortValue+0x8c>
    1254:	2d 81       	ldd	r18, Y+5	; 0x05
    1256:	3e 81       	ldd	r19, Y+6	; 0x06
    1258:	22 30       	cpi	r18, 0x02	; 2
    125a:	31 05       	cpc	r19, r1
    125c:	a1 f0       	breq	.+40     	; 0x1286 <GPIO_u8GetPortValue+0x70>
    125e:	8d 81       	ldd	r24, Y+5	; 0x05
    1260:	9e 81       	ldd	r25, Y+6	; 0x06
    1262:	83 30       	cpi	r24, 0x03	; 3
    1264:	91 05       	cpc	r25, r1
    1266:	b1 f0       	breq	.+44     	; 0x1294 <GPIO_u8GetPortValue+0x7e>
    1268:	1c c0       	rjmp	.+56     	; 0x12a2 <GPIO_u8GetPortValue+0x8c>
	{
	case GPIO_PINA:
		*(u8PCopyValue)=PINA;
    126a:	e9 e3       	ldi	r30, 0x39	; 57
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	eb 81       	ldd	r30, Y+3	; 0x03
    1272:	fc 81       	ldd	r31, Y+4	; 0x04
    1274:	80 83       	st	Z, r24
    1276:	17 c0       	rjmp	.+46     	; 0x12a6 <GPIO_u8GetPortValue+0x90>
		break;
	case GPIO_PINB:
		*(u8PCopyValue)=PINB;
    1278:	e6 e3       	ldi	r30, 0x36	; 54
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	eb 81       	ldd	r30, Y+3	; 0x03
    1280:	fc 81       	ldd	r31, Y+4	; 0x04
    1282:	80 83       	st	Z, r24
    1284:	10 c0       	rjmp	.+32     	; 0x12a6 <GPIO_u8GetPortValue+0x90>
		break;
	case GPIO_PINC:
		*(u8PCopyValue)=PINC;
    1286:	e3 e3       	ldi	r30, 0x33	; 51
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	eb 81       	ldd	r30, Y+3	; 0x03
    128e:	fc 81       	ldd	r31, Y+4	; 0x04
    1290:	80 83       	st	Z, r24
    1292:	09 c0       	rjmp	.+18     	; 0x12a6 <GPIO_u8GetPortValue+0x90>
			break;
	case GPIO_PIND:
		*(u8PCopyValue)=PIND;
    1294:	e0 e3       	ldi	r30, 0x30	; 48
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	eb 81       	ldd	r30, Y+3	; 0x03
    129c:	fc 81       	ldd	r31, Y+4	; 0x04
    129e:	80 83       	st	Z, r24
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <GPIO_u8GetPortValue+0x90>
			break;
	default:
		Local_u8Error=ERROR_NOK;
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	89 83       	std	Y+1, r24	; 0x01


	}
	return Local_u8Error;
    12a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    12a8:	26 96       	adiw	r28, 0x06	; 6
    12aa:	0f b6       	in	r0, 0x3f	; 63
    12ac:	f8 94       	cli
    12ae:	de bf       	out	0x3e, r29	; 62
    12b0:	0f be       	out	0x3f, r0	; 63
    12b2:	cd bf       	out	0x3d, r28	; 61
    12b4:	cf 91       	pop	r28
    12b6:	df 91       	pop	r29
    12b8:	08 95       	ret

000012ba <LCD_VInitialize>:
 * ARGUMENTS    : void
 * RETURN       : void
 */

void LCD_VInitialize(void)
{
    12ba:	df 93       	push	r29
    12bc:	cf 93       	push	r28
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
    12c2:	e8 97       	sbiw	r28, 0x38	; 56
    12c4:	0f b6       	in	r0, 0x3f	; 63
    12c6:	f8 94       	cli
    12c8:	de bf       	out	0x3e, r29	; 62
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	cd bf       	out	0x3d, r28	; 61
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	a8 ec       	ldi	r26, 0xC8	; 200
    12d4:	b2 e4       	ldi	r27, 0x42	; 66
    12d6:	8d ab       	std	Y+53, r24	; 0x35
    12d8:	9e ab       	std	Y+54, r25	; 0x36
    12da:	af ab       	std	Y+55, r26	; 0x37
    12dc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12de:	6d a9       	ldd	r22, Y+53	; 0x35
    12e0:	7e a9       	ldd	r23, Y+54	; 0x36
    12e2:	8f a9       	ldd	r24, Y+55	; 0x37
    12e4:	98 ad       	ldd	r25, Y+56	; 0x38
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	4a ef       	ldi	r20, 0xFA	; 250
    12ec:	54 e4       	ldi	r21, 0x44	; 68
    12ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f2:	dc 01       	movw	r26, r24
    12f4:	cb 01       	movw	r24, r22
    12f6:	89 ab       	std	Y+49, r24	; 0x31
    12f8:	9a ab       	std	Y+50, r25	; 0x32
    12fa:	ab ab       	std	Y+51, r26	; 0x33
    12fc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    12fe:	69 a9       	ldd	r22, Y+49	; 0x31
    1300:	7a a9       	ldd	r23, Y+50	; 0x32
    1302:	8b a9       	ldd	r24, Y+51	; 0x33
    1304:	9c a9       	ldd	r25, Y+52	; 0x34
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	40 e8       	ldi	r20, 0x80	; 128
    130c:	5f e3       	ldi	r21, 0x3F	; 63
    130e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1312:	88 23       	and	r24, r24
    1314:	2c f4       	brge	.+10     	; 0x1320 <LCD_VInitialize+0x66>
		__ticks = 1;
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	98 ab       	std	Y+48, r25	; 0x30
    131c:	8f a7       	std	Y+47, r24	; 0x2f
    131e:	3f c0       	rjmp	.+126    	; 0x139e <LCD_VInitialize+0xe4>
	else if (__tmp > 65535)
    1320:	69 a9       	ldd	r22, Y+49	; 0x31
    1322:	7a a9       	ldd	r23, Y+50	; 0x32
    1324:	8b a9       	ldd	r24, Y+51	; 0x33
    1326:	9c a9       	ldd	r25, Y+52	; 0x34
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	3f ef       	ldi	r19, 0xFF	; 255
    132c:	4f e7       	ldi	r20, 0x7F	; 127
    132e:	57 e4       	ldi	r21, 0x47	; 71
    1330:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1334:	18 16       	cp	r1, r24
    1336:	4c f5       	brge	.+82     	; 0x138a <LCD_VInitialize+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1338:	6d a9       	ldd	r22, Y+53	; 0x35
    133a:	7e a9       	ldd	r23, Y+54	; 0x36
    133c:	8f a9       	ldd	r24, Y+55	; 0x37
    133e:	98 ad       	ldd	r25, Y+56	; 0x38
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	40 e2       	ldi	r20, 0x20	; 32
    1346:	51 e4       	ldi	r21, 0x41	; 65
    1348:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    134c:	dc 01       	movw	r26, r24
    134e:	cb 01       	movw	r24, r22
    1350:	bc 01       	movw	r22, r24
    1352:	cd 01       	movw	r24, r26
    1354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	98 ab       	std	Y+48, r25	; 0x30
    135e:	8f a7       	std	Y+47, r24	; 0x2f
    1360:	0f c0       	rjmp	.+30     	; 0x1380 <LCD_VInitialize+0xc6>
    1362:	88 ec       	ldi	r24, 0xC8	; 200
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	9e a7       	std	Y+46, r25	; 0x2e
    1368:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    136a:	8d a5       	ldd	r24, Y+45	; 0x2d
    136c:	9e a5       	ldd	r25, Y+46	; 0x2e
    136e:	01 97       	sbiw	r24, 0x01	; 1
    1370:	f1 f7       	brne	.-4      	; 0x136e <LCD_VInitialize+0xb4>
    1372:	9e a7       	std	Y+46, r25	; 0x2e
    1374:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1376:	8f a5       	ldd	r24, Y+47	; 0x2f
    1378:	98 a9       	ldd	r25, Y+48	; 0x30
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	98 ab       	std	Y+48, r25	; 0x30
    137e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1380:	8f a5       	ldd	r24, Y+47	; 0x2f
    1382:	98 a9       	ldd	r25, Y+48	; 0x30
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	69 f7       	brne	.-38     	; 0x1362 <LCD_VInitialize+0xa8>
    1388:	14 c0       	rjmp	.+40     	; 0x13b2 <LCD_VInitialize+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    138a:	69 a9       	ldd	r22, Y+49	; 0x31
    138c:	7a a9       	ldd	r23, Y+50	; 0x32
    138e:	8b a9       	ldd	r24, Y+51	; 0x33
    1390:	9c a9       	ldd	r25, Y+52	; 0x34
    1392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1396:	dc 01       	movw	r26, r24
    1398:	cb 01       	movw	r24, r22
    139a:	98 ab       	std	Y+48, r25	; 0x30
    139c:	8f a7       	std	Y+47, r24	; 0x2f
    139e:	8f a5       	ldd	r24, Y+47	; 0x2f
    13a0:	98 a9       	ldd	r25, Y+48	; 0x30
    13a2:	9c a7       	std	Y+44, r25	; 0x2c
    13a4:	8b a7       	std	Y+43, r24	; 0x2b
    13a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    13a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    13aa:	01 97       	sbiw	r24, 0x01	; 1
    13ac:	f1 f7       	brne	.-4      	; 0x13aa <LCD_VInitialize+0xf0>
    13ae:	9c a7       	std	Y+44, r25	; 0x2c
    13b0:	8b a7       	std	Y+43, r24	; 0x2b

#if LCD_BIT_MODE == EightBit
	//LCD_BIT_MODE   EightBit
	_delay_ms(100);
	WriteCommand(FUNCTIONSET_2LINES_SFONT);
    13b2:	88 e3       	ldi	r24, 0x38	; 56
    13b4:	0e 94 75 0c 	call	0x18ea	; 0x18ea <WriteCommand>
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	a8 ec       	ldi	r26, 0xC8	; 200
    13be:	b2 e4       	ldi	r27, 0x42	; 66
    13c0:	8f a3       	std	Y+39, r24	; 0x27
    13c2:	98 a7       	std	Y+40, r25	; 0x28
    13c4:	a9 a7       	std	Y+41, r26	; 0x29
    13c6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13c8:	6f a1       	ldd	r22, Y+39	; 0x27
    13ca:	78 a5       	ldd	r23, Y+40	; 0x28
    13cc:	89 a5       	ldd	r24, Y+41	; 0x29
    13ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	4a ef       	ldi	r20, 0xFA	; 250
    13d6:	54 e4       	ldi	r21, 0x44	; 68
    13d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13dc:	dc 01       	movw	r26, r24
    13de:	cb 01       	movw	r24, r22
    13e0:	8b a3       	std	Y+35, r24	; 0x23
    13e2:	9c a3       	std	Y+36, r25	; 0x24
    13e4:	ad a3       	std	Y+37, r26	; 0x25
    13e6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    13e8:	6b a1       	ldd	r22, Y+35	; 0x23
    13ea:	7c a1       	ldd	r23, Y+36	; 0x24
    13ec:	8d a1       	ldd	r24, Y+37	; 0x25
    13ee:	9e a1       	ldd	r25, Y+38	; 0x26
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	40 e8       	ldi	r20, 0x80	; 128
    13f6:	5f e3       	ldi	r21, 0x3F	; 63
    13f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13fc:	88 23       	and	r24, r24
    13fe:	2c f4       	brge	.+10     	; 0x140a <LCD_VInitialize+0x150>
		__ticks = 1;
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	9a a3       	std	Y+34, r25	; 0x22
    1406:	89 a3       	std	Y+33, r24	; 0x21
    1408:	3f c0       	rjmp	.+126    	; 0x1488 <LCD_VInitialize+0x1ce>
	else if (__tmp > 65535)
    140a:	6b a1       	ldd	r22, Y+35	; 0x23
    140c:	7c a1       	ldd	r23, Y+36	; 0x24
    140e:	8d a1       	ldd	r24, Y+37	; 0x25
    1410:	9e a1       	ldd	r25, Y+38	; 0x26
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	3f ef       	ldi	r19, 0xFF	; 255
    1416:	4f e7       	ldi	r20, 0x7F	; 127
    1418:	57 e4       	ldi	r21, 0x47	; 71
    141a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    141e:	18 16       	cp	r1, r24
    1420:	4c f5       	brge	.+82     	; 0x1474 <LCD_VInitialize+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1422:	6f a1       	ldd	r22, Y+39	; 0x27
    1424:	78 a5       	ldd	r23, Y+40	; 0x28
    1426:	89 a5       	ldd	r24, Y+41	; 0x29
    1428:	9a a5       	ldd	r25, Y+42	; 0x2a
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	40 e2       	ldi	r20, 0x20	; 32
    1430:	51 e4       	ldi	r21, 0x41	; 65
    1432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	bc 01       	movw	r22, r24
    143c:	cd 01       	movw	r24, r26
    143e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	9a a3       	std	Y+34, r25	; 0x22
    1448:	89 a3       	std	Y+33, r24	; 0x21
    144a:	0f c0       	rjmp	.+30     	; 0x146a <LCD_VInitialize+0x1b0>
    144c:	88 ec       	ldi	r24, 0xC8	; 200
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	98 a3       	std	Y+32, r25	; 0x20
    1452:	8f 8f       	std	Y+31, r24	; 0x1f
    1454:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1456:	98 a1       	ldd	r25, Y+32	; 0x20
    1458:	01 97       	sbiw	r24, 0x01	; 1
    145a:	f1 f7       	brne	.-4      	; 0x1458 <LCD_VInitialize+0x19e>
    145c:	98 a3       	std	Y+32, r25	; 0x20
    145e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1460:	89 a1       	ldd	r24, Y+33	; 0x21
    1462:	9a a1       	ldd	r25, Y+34	; 0x22
    1464:	01 97       	sbiw	r24, 0x01	; 1
    1466:	9a a3       	std	Y+34, r25	; 0x22
    1468:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    146a:	89 a1       	ldd	r24, Y+33	; 0x21
    146c:	9a a1       	ldd	r25, Y+34	; 0x22
    146e:	00 97       	sbiw	r24, 0x00	; 0
    1470:	69 f7       	brne	.-38     	; 0x144c <LCD_VInitialize+0x192>
    1472:	14 c0       	rjmp	.+40     	; 0x149c <LCD_VInitialize+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1474:	6b a1       	ldd	r22, Y+35	; 0x23
    1476:	7c a1       	ldd	r23, Y+36	; 0x24
    1478:	8d a1       	ldd	r24, Y+37	; 0x25
    147a:	9e a1       	ldd	r25, Y+38	; 0x26
    147c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1480:	dc 01       	movw	r26, r24
    1482:	cb 01       	movw	r24, r22
    1484:	9a a3       	std	Y+34, r25	; 0x22
    1486:	89 a3       	std	Y+33, r24	; 0x21
    1488:	89 a1       	ldd	r24, Y+33	; 0x21
    148a:	9a a1       	ldd	r25, Y+34	; 0x22
    148c:	9e 8f       	std	Y+30, r25	; 0x1e
    148e:	8d 8f       	std	Y+29, r24	; 0x1d
    1490:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1492:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1494:	01 97       	sbiw	r24, 0x01	; 1
    1496:	f1 f7       	brne	.-4      	; 0x1494 <LCD_VInitialize+0x1da>
    1498:	9e 8f       	std	Y+30, r25	; 0x1e
    149a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(100);
//	WriteCommand(DISPLAY_ON_Cursor_off_Blink_off);
	WriteCommand(DISPLAY_ON_Cursor_off_Blink_on);
    149c:	8f e0       	ldi	r24, 0x0F	; 15
    149e:	0e 94 75 0c 	call	0x18ea	; 0x18ea <WriteCommand>
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	a8 ec       	ldi	r26, 0xC8	; 200
    14a8:	b2 e4       	ldi	r27, 0x42	; 66
    14aa:	89 8f       	std	Y+25, r24	; 0x19
    14ac:	9a 8f       	std	Y+26, r25	; 0x1a
    14ae:	ab 8f       	std	Y+27, r26	; 0x1b
    14b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14b2:	69 8d       	ldd	r22, Y+25	; 0x19
    14b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	4a ef       	ldi	r20, 0xFA	; 250
    14c0:	54 e4       	ldi	r21, 0x44	; 68
    14c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c6:	dc 01       	movw	r26, r24
    14c8:	cb 01       	movw	r24, r22
    14ca:	8d 8b       	std	Y+21, r24	; 0x15
    14cc:	9e 8b       	std	Y+22, r25	; 0x16
    14ce:	af 8b       	std	Y+23, r26	; 0x17
    14d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14d2:	6d 89       	ldd	r22, Y+21	; 0x15
    14d4:	7e 89       	ldd	r23, Y+22	; 0x16
    14d6:	8f 89       	ldd	r24, Y+23	; 0x17
    14d8:	98 8d       	ldd	r25, Y+24	; 0x18
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	40 e8       	ldi	r20, 0x80	; 128
    14e0:	5f e3       	ldi	r21, 0x3F	; 63
    14e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14e6:	88 23       	and	r24, r24
    14e8:	2c f4       	brge	.+10     	; 0x14f4 <LCD_VInitialize+0x23a>
		__ticks = 1;
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	9c 8b       	std	Y+20, r25	; 0x14
    14f0:	8b 8b       	std	Y+19, r24	; 0x13
    14f2:	3f c0       	rjmp	.+126    	; 0x1572 <LCD_VInitialize+0x2b8>
	else if (__tmp > 65535)
    14f4:	6d 89       	ldd	r22, Y+21	; 0x15
    14f6:	7e 89       	ldd	r23, Y+22	; 0x16
    14f8:	8f 89       	ldd	r24, Y+23	; 0x17
    14fa:	98 8d       	ldd	r25, Y+24	; 0x18
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	3f ef       	ldi	r19, 0xFF	; 255
    1500:	4f e7       	ldi	r20, 0x7F	; 127
    1502:	57 e4       	ldi	r21, 0x47	; 71
    1504:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1508:	18 16       	cp	r1, r24
    150a:	4c f5       	brge	.+82     	; 0x155e <LCD_VInitialize+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    150c:	69 8d       	ldd	r22, Y+25	; 0x19
    150e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1510:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1512:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	40 e2       	ldi	r20, 0x20	; 32
    151a:	51 e4       	ldi	r21, 0x41	; 65
    151c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	bc 01       	movw	r22, r24
    1526:	cd 01       	movw	r24, r26
    1528:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    152c:	dc 01       	movw	r26, r24
    152e:	cb 01       	movw	r24, r22
    1530:	9c 8b       	std	Y+20, r25	; 0x14
    1532:	8b 8b       	std	Y+19, r24	; 0x13
    1534:	0f c0       	rjmp	.+30     	; 0x1554 <LCD_VInitialize+0x29a>
    1536:	88 ec       	ldi	r24, 0xC8	; 200
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	9a 8b       	std	Y+18, r25	; 0x12
    153c:	89 8b       	std	Y+17, r24	; 0x11
    153e:	89 89       	ldd	r24, Y+17	; 0x11
    1540:	9a 89       	ldd	r25, Y+18	; 0x12
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	f1 f7       	brne	.-4      	; 0x1542 <LCD_VInitialize+0x288>
    1546:	9a 8b       	std	Y+18, r25	; 0x12
    1548:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    154a:	8b 89       	ldd	r24, Y+19	; 0x13
    154c:	9c 89       	ldd	r25, Y+20	; 0x14
    154e:	01 97       	sbiw	r24, 0x01	; 1
    1550:	9c 8b       	std	Y+20, r25	; 0x14
    1552:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1554:	8b 89       	ldd	r24, Y+19	; 0x13
    1556:	9c 89       	ldd	r25, Y+20	; 0x14
    1558:	00 97       	sbiw	r24, 0x00	; 0
    155a:	69 f7       	brne	.-38     	; 0x1536 <LCD_VInitialize+0x27c>
    155c:	14 c0       	rjmp	.+40     	; 0x1586 <LCD_VInitialize+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    155e:	6d 89       	ldd	r22, Y+21	; 0x15
    1560:	7e 89       	ldd	r23, Y+22	; 0x16
    1562:	8f 89       	ldd	r24, Y+23	; 0x17
    1564:	98 8d       	ldd	r25, Y+24	; 0x18
    1566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    156a:	dc 01       	movw	r26, r24
    156c:	cb 01       	movw	r24, r22
    156e:	9c 8b       	std	Y+20, r25	; 0x14
    1570:	8b 8b       	std	Y+19, r24	; 0x13
    1572:	8b 89       	ldd	r24, Y+19	; 0x13
    1574:	9c 89       	ldd	r25, Y+20	; 0x14
    1576:	98 8b       	std	Y+16, r25	; 0x10
    1578:	8f 87       	std	Y+15, r24	; 0x0f
    157a:	8f 85       	ldd	r24, Y+15	; 0x0f
    157c:	98 89       	ldd	r25, Y+16	; 0x10
    157e:	01 97       	sbiw	r24, 0x01	; 1
    1580:	f1 f7       	brne	.-4      	; 0x157e <LCD_VInitialize+0x2c4>
    1582:	98 8b       	std	Y+16, r25	; 0x10
    1584:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	WriteCommand(DISPLAY_CLEAR);
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	0e 94 75 0c 	call	0x18ea	; 0x18ea <WriteCommand>
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	a8 ec       	ldi	r26, 0xC8	; 200
    1592:	b2 e4       	ldi	r27, 0x42	; 66
    1594:	8b 87       	std	Y+11, r24	; 0x0b
    1596:	9c 87       	std	Y+12, r25	; 0x0c
    1598:	ad 87       	std	Y+13, r26	; 0x0d
    159a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    159c:	6b 85       	ldd	r22, Y+11	; 0x0b
    159e:	7c 85       	ldd	r23, Y+12	; 0x0c
    15a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    15a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	4a ef       	ldi	r20, 0xFA	; 250
    15aa:	54 e4       	ldi	r21, 0x44	; 68
    15ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b0:	dc 01       	movw	r26, r24
    15b2:	cb 01       	movw	r24, r22
    15b4:	8f 83       	std	Y+7, r24	; 0x07
    15b6:	98 87       	std	Y+8, r25	; 0x08
    15b8:	a9 87       	std	Y+9, r26	; 0x09
    15ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15bc:	6f 81       	ldd	r22, Y+7	; 0x07
    15be:	78 85       	ldd	r23, Y+8	; 0x08
    15c0:	89 85       	ldd	r24, Y+9	; 0x09
    15c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	40 e8       	ldi	r20, 0x80	; 128
    15ca:	5f e3       	ldi	r21, 0x3F	; 63
    15cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15d0:	88 23       	and	r24, r24
    15d2:	2c f4       	brge	.+10     	; 0x15de <LCD_VInitialize+0x324>
		__ticks = 1;
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	9e 83       	std	Y+6, r25	; 0x06
    15da:	8d 83       	std	Y+5, r24	; 0x05
    15dc:	3f c0       	rjmp	.+126    	; 0x165c <LCD_VInitialize+0x3a2>
	else if (__tmp > 65535)
    15de:	6f 81       	ldd	r22, Y+7	; 0x07
    15e0:	78 85       	ldd	r23, Y+8	; 0x08
    15e2:	89 85       	ldd	r24, Y+9	; 0x09
    15e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	3f ef       	ldi	r19, 0xFF	; 255
    15ea:	4f e7       	ldi	r20, 0x7F	; 127
    15ec:	57 e4       	ldi	r21, 0x47	; 71
    15ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15f2:	18 16       	cp	r1, r24
    15f4:	4c f5       	brge	.+82     	; 0x1648 <LCD_VInitialize+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    15f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    15fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    15fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    15fe:	20 e0       	ldi	r18, 0x00	; 0
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	40 e2       	ldi	r20, 0x20	; 32
    1604:	51 e4       	ldi	r21, 0x41	; 65
    1606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    160a:	dc 01       	movw	r26, r24
    160c:	cb 01       	movw	r24, r22
    160e:	bc 01       	movw	r22, r24
    1610:	cd 01       	movw	r24, r26
    1612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1616:	dc 01       	movw	r26, r24
    1618:	cb 01       	movw	r24, r22
    161a:	9e 83       	std	Y+6, r25	; 0x06
    161c:	8d 83       	std	Y+5, r24	; 0x05
    161e:	0f c0       	rjmp	.+30     	; 0x163e <LCD_VInitialize+0x384>
    1620:	88 ec       	ldi	r24, 0xC8	; 200
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	9c 83       	std	Y+4, r25	; 0x04
    1626:	8b 83       	std	Y+3, r24	; 0x03
    1628:	8b 81       	ldd	r24, Y+3	; 0x03
    162a:	9c 81       	ldd	r25, Y+4	; 0x04
    162c:	01 97       	sbiw	r24, 0x01	; 1
    162e:	f1 f7       	brne	.-4      	; 0x162c <LCD_VInitialize+0x372>
    1630:	9c 83       	std	Y+4, r25	; 0x04
    1632:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1634:	8d 81       	ldd	r24, Y+5	; 0x05
    1636:	9e 81       	ldd	r25, Y+6	; 0x06
    1638:	01 97       	sbiw	r24, 0x01	; 1
    163a:	9e 83       	std	Y+6, r25	; 0x06
    163c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    163e:	8d 81       	ldd	r24, Y+5	; 0x05
    1640:	9e 81       	ldd	r25, Y+6	; 0x06
    1642:	00 97       	sbiw	r24, 0x00	; 0
    1644:	69 f7       	brne	.-38     	; 0x1620 <LCD_VInitialize+0x366>
    1646:	14 c0       	rjmp	.+40     	; 0x1670 <LCD_VInitialize+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1648:	6f 81       	ldd	r22, Y+7	; 0x07
    164a:	78 85       	ldd	r23, Y+8	; 0x08
    164c:	89 85       	ldd	r24, Y+9	; 0x09
    164e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1650:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1654:	dc 01       	movw	r26, r24
    1656:	cb 01       	movw	r24, r22
    1658:	9e 83       	std	Y+6, r25	; 0x06
    165a:	8d 83       	std	Y+5, r24	; 0x05
    165c:	8d 81       	ldd	r24, Y+5	; 0x05
    165e:	9e 81       	ldd	r25, Y+6	; 0x06
    1660:	9a 83       	std	Y+2, r25	; 0x02
    1662:	89 83       	std	Y+1, r24	; 0x01
    1664:	89 81       	ldd	r24, Y+1	; 0x01
    1666:	9a 81       	ldd	r25, Y+2	; 0x02
    1668:	01 97       	sbiw	r24, 0x01	; 1
    166a:	f1 f7       	brne	.-4      	; 0x1668 <LCD_VInitialize+0x3ae>
    166c:	9a 83       	std	Y+2, r25	; 0x02
    166e:	89 83       	std	Y+1, r24	; 0x01



#endif

}
    1670:	e8 96       	adiw	r28, 0x38	; 56
    1672:	0f b6       	in	r0, 0x3f	; 63
    1674:	f8 94       	cli
    1676:	de bf       	out	0x3e, r29	; 62
    1678:	0f be       	out	0x3f, r0	; 63
    167a:	cd bf       	out	0x3d, r28	; 61
    167c:	cf 91       	pop	r28
    167e:	df 91       	pop	r29
    1680:	08 95       	ret

00001682 <LCD_WriteStringInPosition>:
 *
 * ARGUMENTS    : string you want write and certain position  according to size of lcd ,which is configured in a configuration file
 * RETURN       : error state level
 */
 u8 LCD_WriteStringInPosition(u8 *Copy_u8PString,u8 Copy_Xpos,u8 Copy_Ypos)
{
    1682:	df 93       	push	r29
    1684:	cf 93       	push	r28
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
    168a:	29 97       	sbiw	r28, 0x09	; 9
    168c:	0f b6       	in	r0, 0x3f	; 63
    168e:	f8 94       	cli
    1690:	de bf       	out	0x3e, r29	; 62
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	cd bf       	out	0x3d, r28	; 61
    1696:	9c 83       	std	Y+4, r25	; 0x04
    1698:	8b 83       	std	Y+3, r24	; 0x03
    169a:	6d 83       	std	Y+5, r22	; 0x05
    169c:	4e 83       	std	Y+6, r20	; 0x06

	 /*hight is y axis
	 width is x axis*/
	  u8 Local_u8ErrorState=ERROR_NOK;
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	8a 83       	std	Y+2, r24	; 0x02
     u8 Local_u8_AddressDDRAM=0x00;
    16a2:	19 82       	std	Y+1, r1	; 0x01
	  /*********************INPUT VALIDATION**************************/

	  if (Copy_u8PString == NULL ||Copy_Xpos >LCD_SIZE_WIDTH ||Copy_Ypos >LCD_SIZE_HIGHT)
    16a4:	8b 81       	ldd	r24, Y+3	; 0x03
    16a6:	9c 81       	ldd	r25, Y+4	; 0x04
    16a8:	00 97       	sbiw	r24, 0x00	; 0
    16aa:	31 f0       	breq	.+12     	; 0x16b8 <LCD_WriteStringInPosition+0x36>
    16ac:	8d 81       	ldd	r24, Y+5	; 0x05
    16ae:	81 31       	cpi	r24, 0x11	; 17
    16b0:	18 f4       	brcc	.+6      	; 0x16b8 <LCD_WriteStringInPosition+0x36>
    16b2:	8e 81       	ldd	r24, Y+6	; 0x06
    16b4:	83 30       	cpi	r24, 0x03	; 3
    16b6:	18 f0       	brcs	.+6      	; 0x16be <LCD_WriteStringInPosition+0x3c>
	  {
		return Local_u8ErrorState;
    16b8:	2a 81       	ldd	r18, Y+2	; 0x02
    16ba:	29 87       	std	Y+9, r18	; 0x09
    16bc:	68 c0       	rjmp	.+208    	; 0x178e <LCD_WriteStringInPosition+0x10c>
	  }

	  switch(LCD_W_H)
    16be:	80 91 6c 00 	lds	r24, 0x006C
    16c2:	28 2f       	mov	r18, r24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	38 87       	std	Y+8, r19	; 0x08
    16c8:	2f 83       	std	Y+7, r18	; 0x07
    16ca:	8f 81       	ldd	r24, Y+7	; 0x07
    16cc:	98 85       	ldd	r25, Y+8	; 0x08
    16ce:	81 30       	cpi	r24, 0x01	; 1
    16d0:	91 05       	cpc	r25, r1
    16d2:	09 f4       	brne	.+2      	; 0x16d6 <LCD_WriteStringInPosition+0x54>
    16d4:	5a c0       	rjmp	.+180    	; 0x178a <LCD_WriteStringInPosition+0x108>
    16d6:	2f 81       	ldd	r18, Y+7	; 0x07
    16d8:	38 85       	ldd	r19, Y+8	; 0x08
    16da:	22 30       	cpi	r18, 0x02	; 2
    16dc:	31 05       	cpc	r19, r1
    16de:	2c f4       	brge	.+10     	; 0x16ea <LCD_WriteStringInPosition+0x68>
    16e0:	8f 81       	ldd	r24, Y+7	; 0x07
    16e2:	98 85       	ldd	r25, Y+8	; 0x08
    16e4:	00 97       	sbiw	r24, 0x00	; 0
    16e6:	71 f0       	breq	.+28     	; 0x1704 <LCD_WriteStringInPosition+0x82>
    16e8:	4e c0       	rjmp	.+156    	; 0x1786 <LCD_WriteStringInPosition+0x104>
    16ea:	2f 81       	ldd	r18, Y+7	; 0x07
    16ec:	38 85       	ldd	r19, Y+8	; 0x08
    16ee:	22 30       	cpi	r18, 0x02	; 2
    16f0:	31 05       	cpc	r19, r1
    16f2:	09 f4       	brne	.+2      	; 0x16f6 <LCD_WriteStringInPosition+0x74>
    16f4:	4a c0       	rjmp	.+148    	; 0x178a <LCD_WriteStringInPosition+0x108>
    16f6:	8f 81       	ldd	r24, Y+7	; 0x07
    16f8:	98 85       	ldd	r25, Y+8	; 0x08
    16fa:	83 30       	cpi	r24, 0x03	; 3
    16fc:	91 05       	cpc	r25, r1
    16fe:	09 f4       	brne	.+2      	; 0x1702 <LCD_WriteStringInPosition+0x80>
    1700:	44 c0       	rjmp	.+136    	; 0x178a <LCD_WriteStringInPosition+0x108>
    1702:	41 c0       	rjmp	.+130    	; 0x1786 <LCD_WriteStringInPosition+0x104>
	  {
	  case LCD_16_2:
		  	  	  	  Local_u8_AddressDDRAM=(Copy_Ypos*ADDRESS_2ND_ROW)+Copy_Xpos;
    1704:	8e 81       	ldd	r24, Y+6	; 0x06
    1706:	88 2f       	mov	r24, r24
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	00 24       	eor	r0, r0
    170c:	96 95       	lsr	r25
    170e:	87 95       	ror	r24
    1710:	07 94       	ror	r0
    1712:	96 95       	lsr	r25
    1714:	87 95       	ror	r24
    1716:	07 94       	ror	r0
    1718:	98 2f       	mov	r25, r24
    171a:	80 2d       	mov	r24, r0
    171c:	98 2f       	mov	r25, r24
    171e:	8d 81       	ldd	r24, Y+5	; 0x05
    1720:	89 0f       	add	r24, r25
    1722:	89 83       	std	Y+1, r24	; 0x01
		  	  	  	  Local_u8_AddressDDRAM|=COMMAND_SET_ADDRESS_DDRAM;    /* 1 xxx xxxx  where x's are bits indicate to address in DDRAM */
    1724:	89 81       	ldd	r24, Y+1	; 0x01
    1726:	80 68       	ori	r24, 0x80	; 128
    1728:	89 83       	std	Y+1, r24	; 0x01
		  	  	  	  WriteCommand(Local_u8_AddressDDRAM); /*this command goes to DDRAM */
    172a:	89 81       	ldd	r24, Y+1	; 0x01
    172c:	0e 94 75 0c 	call	0x18ea	; 0x18ea <WriteCommand>
    1730:	23 c0       	rjmp	.+70     	; 0x1778 <LCD_WriteStringInPosition+0xf6>

		  	  	  	  while(*Copy_u8PString !='\0')
		  	  	  	  {

		  	  	  		  if(Local_u8_AddressDDRAM == LCD_16_2_BOUNDRY_1STLINE_ADDRESS_DDRAM)
    1732:	89 81       	ldd	r24, Y+1	; 0x01
    1734:	80 39       	cpi	r24, 0x90	; 144
    1736:	49 f4       	brne	.+18     	; 0x174a <LCD_WriteStringInPosition+0xc8>
		  	  	  		  /*boundry first line in lcd 16x2 from 0x00 to 0x0f so after that willbe  10
		  	  	  		  and  if we add 1 before that address cause the command to get location in DDRAM (1 xxx xxxx)  */
		  	  	  		  {
		  	  	  			  Local_u8_AddressDDRAM=ADDRESS_2ND_ROW;
    1738:	80 e4       	ldi	r24, 0x40	; 64
    173a:	89 83       	std	Y+1, r24	; 0x01
		  	  	  			  Local_u8_AddressDDRAM|=COMMAND_SET_ADDRESS_DDRAM;
    173c:	89 81       	ldd	r24, Y+1	; 0x01
    173e:	80 68       	ori	r24, 0x80	; 128
    1740:	89 83       	std	Y+1, r24	; 0x01
		  	  	  			  WriteCommand(Local_u8_AddressDDRAM);
    1742:	89 81       	ldd	r24, Y+1	; 0x01
    1744:	0e 94 75 0c 	call	0x18ea	; 0x18ea <WriteCommand>
    1748:	0a c0       	rjmp	.+20     	; 0x175e <LCD_WriteStringInPosition+0xdc>



		  	  	  		  }else if (Local_u8_AddressDDRAM == LCD_16_2_BOUNDRY_2NDLINE_ADDRESS_DDRAM)
    174a:	89 81       	ldd	r24, Y+1	; 0x01
    174c:	80 3d       	cpi	r24, 0xD0	; 208
    174e:	39 f4       	brne	.+14     	; 0x175e <LCD_WriteStringInPosition+0xdc>
		  	  	  		  {
		  	  	  			  Local_u8_AddressDDRAM=ADDRESS_1ST_ROW;
    1750:	19 82       	std	Y+1, r1	; 0x01
		  	  	  			  Local_u8_AddressDDRAM|=COMMAND_SET_ADDRESS_DDRAM;
    1752:	89 81       	ldd	r24, Y+1	; 0x01
    1754:	80 68       	ori	r24, 0x80	; 128
    1756:	89 83       	std	Y+1, r24	; 0x01
		  	  	  		      WriteCommand(Local_u8_AddressDDRAM);
    1758:	89 81       	ldd	r24, Y+1	; 0x01
    175a:	0e 94 75 0c 	call	0x18ea	; 0x18ea <WriteCommand>
		  	  	  		  }
		  	  	  	      WriteChar(*Copy_u8PString);
    175e:	eb 81       	ldd	r30, Y+3	; 0x03
    1760:	fc 81       	ldd	r31, Y+4	; 0x04
    1762:	80 81       	ld	r24, Z
    1764:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <WriteChar>
		  	  	  	      Copy_u8PString++;
    1768:	8b 81       	ldd	r24, Y+3	; 0x03
    176a:	9c 81       	ldd	r25, Y+4	; 0x04
    176c:	01 96       	adiw	r24, 0x01	; 1
    176e:	9c 83       	std	Y+4, r25	; 0x04
    1770:	8b 83       	std	Y+3, r24	; 0x03
		  	  	  	      Local_u8_AddressDDRAM++;
    1772:	89 81       	ldd	r24, Y+1	; 0x01
    1774:	8f 5f       	subi	r24, 0xFF	; 255
    1776:	89 83       	std	Y+1, r24	; 0x01
	  case LCD_16_2:
		  	  	  	  Local_u8_AddressDDRAM=(Copy_Ypos*ADDRESS_2ND_ROW)+Copy_Xpos;
		  	  	  	  Local_u8_AddressDDRAM|=COMMAND_SET_ADDRESS_DDRAM;    /* 1 xxx xxxx  where x's are bits indicate to address in DDRAM */
		  	  	  	  WriteCommand(Local_u8_AddressDDRAM); /*this command goes to DDRAM */

		  	  	  	  while(*Copy_u8PString !='\0')
    1778:	eb 81       	ldd	r30, Y+3	; 0x03
    177a:	fc 81       	ldd	r31, Y+4	; 0x04
    177c:	80 81       	ld	r24, Z
    177e:	88 23       	and	r24, r24
    1780:	c1 f6       	brne	.-80     	; 0x1732 <LCD_WriteStringInPosition+0xb0>
		  	  	  		  }
		  	  	  	      WriteChar(*Copy_u8PString);
		  	  	  	      Copy_u8PString++;
		  	  	  	      Local_u8_AddressDDRAM++;
		  	  	  	  }
		  	  	  	  Local_u8ErrorState=ERROR_NO;
    1782:	1a 82       	std	Y+2, r1	; 0x02
    1784:	02 c0       	rjmp	.+4      	; 0x178a <LCD_WriteStringInPosition+0x108>
	  case LCD_20_2:
		  break;
	  case LCD_20_4:
	 		  break;
	  default:
		  Local_u8ErrorState=ERROR_NOK;
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	8a 83       	std	Y+2, r24	; 0x02
	  }




return Local_u8ErrorState;
    178a:	9a 81       	ldd	r25, Y+2	; 0x02
    178c:	99 87       	std	Y+9, r25	; 0x09
    178e:	89 85       	ldd	r24, Y+9	; 0x09

}
    1790:	29 96       	adiw	r28, 0x09	; 9
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	f8 94       	cli
    1796:	de bf       	out	0x3e, r29	; 62
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	cd bf       	out	0x3d, r28	; 61
    179c:	cf 91       	pop	r28
    179e:	df 91       	pop	r29
    17a0:	08 95       	ret

000017a2 <LCD_ClearDisplay>:
  * DESCRIPPTION : this function  clears the screen  totally
  * ARGUMENTS    : void
  * RETURN       : void
  */
 void LCD_ClearDisplay(void)
 {
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
	 WriteCommand(DISPLAY_CLEAR);
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	0e 94 75 0c 	call	0x18ea	; 0x18ea <WriteCommand>
 }
    17b0:	cf 91       	pop	r28
    17b2:	df 91       	pop	r29
    17b4:	08 95       	ret

000017b6 <LCD_u8SymbolDisplay>:

 u8 LCD_u8SymbolDisplay( u8 Copy_u8CharCodeCGROM, u8 Copy_u8Xpos,u8 Copy_u8Ypos)
 {
    17b6:	df 93       	push	r29
    17b8:	cf 93       	push	r28
    17ba:	00 d0       	rcall	.+0      	; 0x17bc <LCD_u8SymbolDisplay+0x6>
    17bc:	00 d0       	rcall	.+0      	; 0x17be <LCD_u8SymbolDisplay+0x8>
    17be:	0f 92       	push	r0
    17c0:	cd b7       	in	r28, 0x3d	; 61
    17c2:	de b7       	in	r29, 0x3e	; 62
    17c4:	8b 83       	std	Y+3, r24	; 0x03
    17c6:	6c 83       	std	Y+4, r22	; 0x04
    17c8:	4d 83       	std	Y+5, r20	; 0x05
	 /*Local Variable holding the error state*/
	 	u8 Local_u8Error = ERROR_NO;
    17ca:	1a 82       	std	Y+2, r1	; 0x02
	 	u8 Local_u8Address;
	 	if ((Copy_u8Xpos >= LCD_SIZE_WIDTH) || (Copy_u8Ypos >= LCD_SIZE_HIGHT))
    17cc:	8c 81       	ldd	r24, Y+4	; 0x04
    17ce:	80 31       	cpi	r24, 0x10	; 16
    17d0:	18 f4       	brcc	.+6      	; 0x17d8 <LCD_u8SymbolDisplay+0x22>
    17d2:	8d 81       	ldd	r24, Y+5	; 0x05
    17d4:	82 30       	cpi	r24, 0x02	; 2
    17d6:	18 f0       	brcs	.+6      	; 0x17de <LCD_u8SymbolDisplay+0x28>
	 	{
	 		Local_u8Error = ERROR_NOK;
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	8a 83       	std	Y+2, r24	; 0x02
    17dc:	19 c0       	rjmp	.+50     	; 0x1810 <LCD_u8SymbolDisplay+0x5a>
	 	}
	 	else
	 	{
	 		Local_u8Address = Copy_u8Xpos+(Copy_u8Ypos*ADDRESS_2ND_ROW);
    17de:	8d 81       	ldd	r24, Y+5	; 0x05
    17e0:	88 2f       	mov	r24, r24
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	00 24       	eor	r0, r0
    17e6:	96 95       	lsr	r25
    17e8:	87 95       	ror	r24
    17ea:	07 94       	ror	r0
    17ec:	96 95       	lsr	r25
    17ee:	87 95       	ror	r24
    17f0:	07 94       	ror	r0
    17f2:	98 2f       	mov	r25, r24
    17f4:	80 2d       	mov	r24, r0
    17f6:	98 2f       	mov	r25, r24
    17f8:	8c 81       	ldd	r24, Y+4	; 0x04
    17fa:	89 0f       	add	r24, r25
    17fc:	89 83       	std	Y+1, r24	; 0x01
	 		Local_u8Address |= COMMAND_SET_ADDRESS_DDRAM;
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	80 68       	ori	r24, 0x80	; 128
    1802:	89 83       	std	Y+1, r24	; 0x01
	 		WriteCommand(Local_u8Address);
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	0e 94 75 0c 	call	0x18ea	; 0x18ea <WriteCommand>
	 		WriteChar(Copy_u8CharCodeCGROM);
    180a:	8b 81       	ldd	r24, Y+3	; 0x03
    180c:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <WriteChar>
	 	}
	 	/*Function return*/
	 	return Local_u8Error;
    1810:	8a 81       	ldd	r24, Y+2	; 0x02

 }
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	cf 91       	pop	r28
    181e:	df 91       	pop	r29
    1820:	08 95       	ret

00001822 <LCD_u8CustomPattern>:
  * ARGUMENTS    : Array pattern and its size and the index of this pattern which is matching to its code in DDRAM
  *
  * RETURN       : void
  */
 u8 LCD_u8CustomPattern(u8 *Copy_u8APattern, u8 Copy_u8size,u8 Copy_u8CodeinDDRAM)
 {
    1822:	df 93       	push	r29
    1824:	cf 93       	push	r28
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62
    182a:	27 97       	sbiw	r28, 0x07	; 7
    182c:	0f b6       	in	r0, 0x3f	; 63
    182e:	f8 94       	cli
    1830:	de bf       	out	0x3e, r29	; 62
    1832:	0f be       	out	0x3f, r0	; 63
    1834:	cd bf       	out	0x3d, r28	; 61
    1836:	9d 83       	std	Y+5, r25	; 0x05
    1838:	8c 83       	std	Y+4, r24	; 0x04
    183a:	6e 83       	std	Y+6, r22	; 0x06
    183c:	4f 83       	std	Y+7, r20	; 0x07
	 u8 Local_u8ErrorState=ERROR_NO;
    183e:	1b 82       	std	Y+3, r1	; 0x03
	 u8 Local_u8AddressCGRAM=Copy_u8size*Copy_u8CodeinDDRAM;      /*0,1,....7 depends on fonts or 0,1,...3*/
    1840:	9e 81       	ldd	r25, Y+6	; 0x06
    1842:	8f 81       	ldd	r24, Y+7	; 0x07
    1844:	98 9f       	mul	r25, r24
    1846:	80 2d       	mov	r24, r0
    1848:	11 24       	eor	r1, r1
    184a:	8a 83       	std	Y+2, r24	; 0x02
	 u8 Local_u8indexloop;
/***************************INPUT VERIFCARTION*******************************/
	if (Copy_u8APattern == NULL)
    184c:	8c 81       	ldd	r24, Y+4	; 0x04
    184e:	9d 81       	ldd	r25, Y+5	; 0x05
    1850:	00 97       	sbiw	r24, 0x00	; 0
    1852:	19 f4       	brne	.+6      	; 0x185a <LCD_u8CustomPattern+0x38>
	{
		Local_u8ErrorState=ERROR_NOK;
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	8b 83       	std	Y+3, r24	; 0x03
    1858:	20 c0       	rjmp	.+64     	; 0x189a <LCD_u8CustomPattern+0x78>
	}

	else
	{
		Local_u8AddressCGRAM|=COMMAND_SET_ADDRESS_CGRAM;
    185a:	8a 81       	ldd	r24, Y+2	; 0x02
    185c:	80 64       	ori	r24, 0x40	; 64
    185e:	8a 83       	std	Y+2, r24	; 0x02
		 WriteCommand(Local_u8AddressCGRAM);
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	0e 94 75 0c 	call	0x18ea	; 0x18ea <WriteCommand>

		 for(Local_u8indexloop=0;Local_u8indexloop<Copy_u8size;Local_u8indexloop++)
    1866:	19 82       	std	Y+1, r1	; 0x01
    1868:	11 c0       	rjmp	.+34     	; 0x188c <LCD_u8CustomPattern+0x6a>
		 {
			 WriteChar(Copy_u8APattern[Local_u8indexloop]);
    186a:	89 81       	ldd	r24, Y+1	; 0x01
    186c:	28 2f       	mov	r18, r24
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	8c 81       	ldd	r24, Y+4	; 0x04
    1872:	9d 81       	ldd	r25, Y+5	; 0x05
    1874:	fc 01       	movw	r30, r24
    1876:	e2 0f       	add	r30, r18
    1878:	f3 1f       	adc	r31, r19
    187a:	80 81       	ld	r24, Z
    187c:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <WriteChar>
			 Local_u8AddressCGRAM++;
    1880:	8a 81       	ldd	r24, Y+2	; 0x02
    1882:	8f 5f       	subi	r24, 0xFF	; 255
    1884:	8a 83       	std	Y+2, r24	; 0x02
	else
	{
		Local_u8AddressCGRAM|=COMMAND_SET_ADDRESS_CGRAM;
		 WriteCommand(Local_u8AddressCGRAM);

		 for(Local_u8indexloop=0;Local_u8indexloop<Copy_u8size;Local_u8indexloop++)
    1886:	89 81       	ldd	r24, Y+1	; 0x01
    1888:	8f 5f       	subi	r24, 0xFF	; 255
    188a:	89 83       	std	Y+1, r24	; 0x01
    188c:	99 81       	ldd	r25, Y+1	; 0x01
    188e:	8e 81       	ldd	r24, Y+6	; 0x06
    1890:	98 17       	cp	r25, r24
    1892:	58 f3       	brcs	.-42     	; 0x186a <LCD_u8CustomPattern+0x48>
		 {
			 WriteChar(Copy_u8APattern[Local_u8indexloop]);
			 Local_u8AddressCGRAM++;

		 }
		 WriteCommand(COMMAND_SET_ADDRESS_DDRAM);
    1894:	80 e8       	ldi	r24, 0x80	; 128
    1896:	0e 94 75 0c 	call	0x18ea	; 0x18ea <WriteCommand>
	}



	return Local_u8ErrorState;
    189a:	8b 81       	ldd	r24, Y+3	; 0x03

 }
    189c:	27 96       	adiw	r28, 0x07	; 7
    189e:	0f b6       	in	r0, 0x3f	; 63
    18a0:	f8 94       	cli
    18a2:	de bf       	out	0x3e, r29	; 62
    18a4:	0f be       	out	0x3f, r0	; 63
    18a6:	cd bf       	out	0x3d, r28	; 61
    18a8:	cf 91       	pop	r28
    18aa:	df 91       	pop	r29
    18ac:	08 95       	ret

000018ae <LCD_ReturnHome>:

 void LCD_ReturnHome(void)
 {
    18ae:	df 93       	push	r29
    18b0:	cf 93       	push	r28
    18b2:	cd b7       	in	r28, 0x3d	; 61
    18b4:	de b7       	in	r29, 0x3e	; 62
	 WriteCommand(COMMAND_RETURN_HOME);
    18b6:	82 e0       	ldi	r24, 0x02	; 2
    18b8:	0e 94 75 0c 	call	0x18ea	; 0x18ea <WriteCommand>
 }
    18bc:	cf 91       	pop	r28
    18be:	df 91       	pop	r29
    18c0:	08 95       	ret

000018c2 <LCD_ShiftLeft>:
 void LCD_ShiftLeft(void)
 {
    18c2:	df 93       	push	r29
    18c4:	cf 93       	push	r28
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
	 WriteCommand(COMMAND_DISPLAYSHIFT_LEFT);
    18ca:	88 e1       	ldi	r24, 0x18	; 24
    18cc:	0e 94 75 0c 	call	0x18ea	; 0x18ea <WriteCommand>
 }
    18d0:	cf 91       	pop	r28
    18d2:	df 91       	pop	r29
    18d4:	08 95       	ret

000018d6 <LCD_ShiftRight>:
 void LCD_ShiftRight(void)
 {
    18d6:	df 93       	push	r29
    18d8:	cf 93       	push	r28
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62
	 WriteCommand(COMMAND_DISPLAYSHIFT_RIGHT);
    18de:	8c e1       	ldi	r24, 0x1C	; 28
    18e0:	0e 94 75 0c 	call	0x18ea	; 0x18ea <WriteCommand>
 }
    18e4:	cf 91       	pop	r28
    18e6:	df 91       	pop	r29
    18e8:	08 95       	ret

000018ea <WriteCommand>:
 * 					SELECT THE INSTRUCTION REGISTER
 * ARGUMENTS    :
 * RETURN       :
 */
static u8 WriteCommand(u8 Copy_u8Command)
{
    18ea:	df 93       	push	r29
    18ec:	cf 93       	push	r28
    18ee:	00 d0       	rcall	.+0      	; 0x18f0 <WriteCommand+0x6>
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
    18f4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=ERROR_NO;
    18f6:	19 82       	std	Y+1, r1	; 0x01

	GPIO_u8SetPinValue(LCD_RS,GPIO_PIN_LOW);
    18f8:	87 e1       	ldi	r24, 0x17	; 23
    18fa:	60 e0       	ldi	r22, 0x00	; 0
    18fc:	0e 94 c2 06 	call	0xd84	; 0xd84 <GPIO_u8SetPinValue>

	Write(Copy_u8Command);
    1900:	8a 81       	ldd	r24, Y+2	; 0x02
    1902:	0e 94 89 0c 	call	0x1912	; 0x1912 <Write>


return Local_u8ErrorState;
    1906:	89 81       	ldd	r24, Y+1	; 0x01
}
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	cf 91       	pop	r28
    190e:	df 91       	pop	r29
    1910:	08 95       	ret

00001912 <Write>:
 * 		        3- write data  on falling edge
 * ARGUMENTS  : values on D7:D0 whatever it is command or data
 * RETURN	  : void
 */
static void Write( u8 Copy_u8Data_or_Command)
{
    1912:	df 93       	push	r29
    1914:	cf 93       	push	r28
    1916:	cd b7       	in	r28, 0x3d	; 61
    1918:	de b7       	in	r29, 0x3e	; 62
    191a:	2f 97       	sbiw	r28, 0x0f	; 15
    191c:	0f b6       	in	r0, 0x3f	; 63
    191e:	f8 94       	cli
    1920:	de bf       	out	0x3e, r29	; 62
    1922:	0f be       	out	0x3f, r0	; 63
    1924:	cd bf       	out	0x3d, r28	; 61
    1926:	8f 87       	std	Y+15, r24	; 0x0f
	GPIO_u8SetPinValue(LCD_R_W_BAR,GPIO_PIN_LOW);
    1928:	86 e1       	ldi	r24, 0x16	; 22
    192a:	60 e0       	ldi	r22, 0x00	; 0
    192c:	0e 94 c2 06 	call	0xd84	; 0xd84 <GPIO_u8SetPinValue>

	GPIO_u8SetPinValue(LCD_ENABLE,GPIO_PIN_LOW);
    1930:	85 e1       	ldi	r24, 0x15	; 21
    1932:	60 e0       	ldi	r22, 0x00	; 0
    1934:	0e 94 c2 06 	call	0xd84	; 0xd84 <GPIO_u8SetPinValue>
	/*get bit */
	// ((var&(1<<bit_index))>>bit_index)
#if LCD_BIT_MODE == EightBit

	GPIO_u8SetPinValue(LCD_D0,GET_BIT(Copy_u8Data_or_Command,0));
    1938:	8f 85       	ldd	r24, Y+15	; 0x0f
    193a:	98 2f       	mov	r25, r24
    193c:	91 70       	andi	r25, 0x01	; 1
    193e:	80 e0       	ldi	r24, 0x00	; 0
    1940:	69 2f       	mov	r22, r25
    1942:	0e 94 c2 06 	call	0xd84	; 0xd84 <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue(LCD_D1,GET_BIT(Copy_u8Data_or_Command,1));
    1946:	8f 85       	ldd	r24, Y+15	; 0x0f
    1948:	88 2f       	mov	r24, r24
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	82 70       	andi	r24, 0x02	; 2
    194e:	90 70       	andi	r25, 0x00	; 0
    1950:	95 95       	asr	r25
    1952:	87 95       	ror	r24
    1954:	98 2f       	mov	r25, r24
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	69 2f       	mov	r22, r25
    195a:	0e 94 c2 06 	call	0xd84	; 0xd84 <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue(LCD_D2,GET_BIT(Copy_u8Data_or_Command,2));
    195e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1960:	88 2f       	mov	r24, r24
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	84 70       	andi	r24, 0x04	; 4
    1966:	90 70       	andi	r25, 0x00	; 0
    1968:	95 95       	asr	r25
    196a:	87 95       	ror	r24
    196c:	95 95       	asr	r25
    196e:	87 95       	ror	r24
    1970:	98 2f       	mov	r25, r24
    1972:	82 e0       	ldi	r24, 0x02	; 2
    1974:	69 2f       	mov	r22, r25
    1976:	0e 94 c2 06 	call	0xd84	; 0xd84 <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue(LCD_D3,GET_BIT(Copy_u8Data_or_Command,3));
    197a:	8f 85       	ldd	r24, Y+15	; 0x0f
    197c:	88 2f       	mov	r24, r24
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	88 70       	andi	r24, 0x08	; 8
    1982:	90 70       	andi	r25, 0x00	; 0
    1984:	95 95       	asr	r25
    1986:	87 95       	ror	r24
    1988:	95 95       	asr	r25
    198a:	87 95       	ror	r24
    198c:	95 95       	asr	r25
    198e:	87 95       	ror	r24
    1990:	98 2f       	mov	r25, r24
    1992:	83 e0       	ldi	r24, 0x03	; 3
    1994:	69 2f       	mov	r22, r25
    1996:	0e 94 c2 06 	call	0xd84	; 0xd84 <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue(LCD_D4,GET_BIT(Copy_u8Data_or_Command,4));
    199a:	8f 85       	ldd	r24, Y+15	; 0x0f
    199c:	88 2f       	mov	r24, r24
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	80 71       	andi	r24, 0x10	; 16
    19a2:	90 70       	andi	r25, 0x00	; 0
    19a4:	95 95       	asr	r25
    19a6:	87 95       	ror	r24
    19a8:	95 95       	asr	r25
    19aa:	87 95       	ror	r24
    19ac:	95 95       	asr	r25
    19ae:	87 95       	ror	r24
    19b0:	95 95       	asr	r25
    19b2:	87 95       	ror	r24
    19b4:	98 2f       	mov	r25, r24
    19b6:	84 e0       	ldi	r24, 0x04	; 4
    19b8:	69 2f       	mov	r22, r25
    19ba:	0e 94 c2 06 	call	0xd84	; 0xd84 <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue(LCD_D5,GET_BIT(Copy_u8Data_or_Command,5));
    19be:	8f 85       	ldd	r24, Y+15	; 0x0f
    19c0:	88 2f       	mov	r24, r24
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	80 72       	andi	r24, 0x20	; 32
    19c6:	90 70       	andi	r25, 0x00	; 0
    19c8:	95 95       	asr	r25
    19ca:	87 95       	ror	r24
    19cc:	95 95       	asr	r25
    19ce:	87 95       	ror	r24
    19d0:	95 95       	asr	r25
    19d2:	87 95       	ror	r24
    19d4:	95 95       	asr	r25
    19d6:	87 95       	ror	r24
    19d8:	95 95       	asr	r25
    19da:	87 95       	ror	r24
    19dc:	98 2f       	mov	r25, r24
    19de:	85 e0       	ldi	r24, 0x05	; 5
    19e0:	69 2f       	mov	r22, r25
    19e2:	0e 94 c2 06 	call	0xd84	; 0xd84 <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue(LCD_D6,GET_BIT(Copy_u8Data_or_Command,6));
    19e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    19e8:	88 2f       	mov	r24, r24
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	80 74       	andi	r24, 0x40	; 64
    19ee:	90 70       	andi	r25, 0x00	; 0
    19f0:	08 2e       	mov	r0, r24
    19f2:	89 2f       	mov	r24, r25
    19f4:	00 0c       	add	r0, r0
    19f6:	88 1f       	adc	r24, r24
    19f8:	99 0b       	sbc	r25, r25
    19fa:	00 0c       	add	r0, r0
    19fc:	88 1f       	adc	r24, r24
    19fe:	99 1f       	adc	r25, r25
    1a00:	98 2f       	mov	r25, r24
    1a02:	86 e0       	ldi	r24, 0x06	; 6
    1a04:	69 2f       	mov	r22, r25
    1a06:	0e 94 c2 06 	call	0xd84	; 0xd84 <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue(LCD_D7,GET_BIT(Copy_u8Data_or_Command,7));
    1a0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a0c:	98 2f       	mov	r25, r24
    1a0e:	99 1f       	adc	r25, r25
    1a10:	99 27       	eor	r25, r25
    1a12:	99 1f       	adc	r25, r25
    1a14:	87 e0       	ldi	r24, 0x07	; 7
    1a16:	69 2f       	mov	r22, r25
    1a18:	0e 94 c2 06 	call	0xd84	; 0xd84 <GPIO_u8SetPinValue>

	GPIO_u8SetPinValue(LCD_ENABLE,GPIO_PIN_HIGH);
    1a1c:	85 e1       	ldi	r24, 0x15	; 21
    1a1e:	61 e0       	ldi	r22, 0x01	; 1
    1a20:	0e 94 c2 06 	call	0xd84	; 0xd84 <GPIO_u8SetPinValue>
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	a8 ec       	ldi	r26, 0xC8	; 200
    1a2a:	b2 e4       	ldi	r27, 0x42	; 66
    1a2c:	8b 87       	std	Y+11, r24	; 0x0b
    1a2e:	9c 87       	std	Y+12, r25	; 0x0c
    1a30:	ad 87       	std	Y+13, r26	; 0x0d
    1a32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a34:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a36:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a38:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	4a ef       	ldi	r20, 0xFA	; 250
    1a42:	54 e4       	ldi	r21, 0x44	; 68
    1a44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	8f 83       	std	Y+7, r24	; 0x07
    1a4e:	98 87       	std	Y+8, r25	; 0x08
    1a50:	a9 87       	std	Y+9, r26	; 0x09
    1a52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a54:	6f 81       	ldd	r22, Y+7	; 0x07
    1a56:	78 85       	ldd	r23, Y+8	; 0x08
    1a58:	89 85       	ldd	r24, Y+9	; 0x09
    1a5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a5c:	20 e0       	ldi	r18, 0x00	; 0
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	40 e8       	ldi	r20, 0x80	; 128
    1a62:	5f e3       	ldi	r21, 0x3F	; 63
    1a64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a68:	88 23       	and	r24, r24
    1a6a:	2c f4       	brge	.+10     	; 0x1a76 <Write+0x164>
		__ticks = 1;
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	9e 83       	std	Y+6, r25	; 0x06
    1a72:	8d 83       	std	Y+5, r24	; 0x05
    1a74:	3f c0       	rjmp	.+126    	; 0x1af4 <Write+0x1e2>
	else if (__tmp > 65535)
    1a76:	6f 81       	ldd	r22, Y+7	; 0x07
    1a78:	78 85       	ldd	r23, Y+8	; 0x08
    1a7a:	89 85       	ldd	r24, Y+9	; 0x09
    1a7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	3f ef       	ldi	r19, 0xFF	; 255
    1a82:	4f e7       	ldi	r20, 0x7F	; 127
    1a84:	57 e4       	ldi	r21, 0x47	; 71
    1a86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a8a:	18 16       	cp	r1, r24
    1a8c:	4c f5       	brge	.+82     	; 0x1ae0 <Write+0x1ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	40 e2       	ldi	r20, 0x20	; 32
    1a9c:	51 e4       	ldi	r21, 0x41	; 65
    1a9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	bc 01       	movw	r22, r24
    1aa8:	cd 01       	movw	r24, r26
    1aaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	9e 83       	std	Y+6, r25	; 0x06
    1ab4:	8d 83       	std	Y+5, r24	; 0x05
    1ab6:	0f c0       	rjmp	.+30     	; 0x1ad6 <Write+0x1c4>
    1ab8:	88 ec       	ldi	r24, 0xC8	; 200
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	9c 83       	std	Y+4, r25	; 0x04
    1abe:	8b 83       	std	Y+3, r24	; 0x03
    1ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac4:	01 97       	sbiw	r24, 0x01	; 1
    1ac6:	f1 f7       	brne	.-4      	; 0x1ac4 <Write+0x1b2>
    1ac8:	9c 83       	std	Y+4, r25	; 0x04
    1aca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1acc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ace:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad0:	01 97       	sbiw	r24, 0x01	; 1
    1ad2:	9e 83       	std	Y+6, r25	; 0x06
    1ad4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad8:	9e 81       	ldd	r25, Y+6	; 0x06
    1ada:	00 97       	sbiw	r24, 0x00	; 0
    1adc:	69 f7       	brne	.-38     	; 0x1ab8 <Write+0x1a6>
    1ade:	14 c0       	rjmp	.+40     	; 0x1b08 <Write+0x1f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae2:	78 85       	ldd	r23, Y+8	; 0x08
    1ae4:	89 85       	ldd	r24, Y+9	; 0x09
    1ae6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	9e 83       	std	Y+6, r25	; 0x06
    1af2:	8d 83       	std	Y+5, r24	; 0x05
    1af4:	8d 81       	ldd	r24, Y+5	; 0x05
    1af6:	9e 81       	ldd	r25, Y+6	; 0x06
    1af8:	9a 83       	std	Y+2, r25	; 0x02
    1afa:	89 83       	std	Y+1, r24	; 0x01
    1afc:	89 81       	ldd	r24, Y+1	; 0x01
    1afe:	9a 81       	ldd	r25, Y+2	; 0x02
    1b00:	01 97       	sbiw	r24, 0x01	; 1
    1b02:	f1 f7       	brne	.-4      	; 0x1b00 <Write+0x1ee>
    1b04:	9a 83       	std	Y+2, r25	; 0x02
    1b06:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	GPIO_u8SetPinValue(LCD_ENABLE,GPIO_PIN_LOW);
    1b08:	85 e1       	ldi	r24, 0x15	; 21
    1b0a:	60 e0       	ldi	r22, 0x00	; 0
    1b0c:	0e 94 c2 06 	call	0xd84	; 0xd84 <GPIO_u8SetPinValue>


#endif


}
    1b10:	2f 96       	adiw	r28, 0x0f	; 15
    1b12:	0f b6       	in	r0, 0x3f	; 63
    1b14:	f8 94       	cli
    1b16:	de bf       	out	0x3e, r29	; 62
    1b18:	0f be       	out	0x3f, r0	; 63
    1b1a:	cd bf       	out	0x3d, r28	; 61
    1b1c:	cf 91       	pop	r28
    1b1e:	df 91       	pop	r29
    1b20:	08 95       	ret

00001b22 <WriteChar>:
/*********************************************************************************************************************************************/


 u8 WriteChar(u8 Copy_u8Char)

{
    1b22:	df 93       	push	r29
    1b24:	cf 93       	push	r28
    1b26:	00 d0       	rcall	.+0      	; 0x1b28 <WriteChar+0x6>
    1b28:	cd b7       	in	r28, 0x3d	; 61
    1b2a:	de b7       	in	r29, 0x3e	; 62
    1b2c:	8a 83       	std	Y+2, r24	; 0x02
	 u8 Local_u8ErrorState=ERROR_NOK;
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	89 83       	std	Y+1, r24	; 0x01

	 GPIO_u8SetPinValue(LCD_RS,GPIO_PIN_HIGH);
    1b32:	87 e1       	ldi	r24, 0x17	; 23
    1b34:	61 e0       	ldi	r22, 0x01	; 1
    1b36:	0e 94 c2 06 	call	0xd84	; 0xd84 <GPIO_u8SetPinValue>

	 Write(Copy_u8Char);
    1b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3c:	0e 94 89 0c 	call	0x1912	; 0x1912 <Write>



	return Local_u8ErrorState;
    1b40:	89 81       	ldd	r24, Y+1	; 0x01

}
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	cf 91       	pop	r28
    1b48:	df 91       	pop	r29
    1b4a:	08 95       	ret

00001b4c <Delay_ms>:


#include "STD_TYPES.h"

void  extern Delay_ms(u32 value)
{
    1b4c:	df 93       	push	r29
    1b4e:	cf 93       	push	r28
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62
    1b54:	2c 97       	sbiw	r28, 0x0c	; 12
    1b56:	0f b6       	in	r0, 0x3f	; 63
    1b58:	f8 94       	cli
    1b5a:	de bf       	out	0x3e, r29	; 62
    1b5c:	0f be       	out	0x3f, r0	; 63
    1b5e:	cd bf       	out	0x3d, r28	; 61
    1b60:	69 87       	std	Y+9, r22	; 0x09
    1b62:	7a 87       	std	Y+10, r23	; 0x0a
    1b64:	8b 87       	std	Y+11, r24	; 0x0b
    1b66:	9c 87       	std	Y+12, r25	; 0x0c


u32 i=0,j=0;
    1b68:	1d 82       	std	Y+5, r1	; 0x05
    1b6a:	1e 82       	std	Y+6, r1	; 0x06
    1b6c:	1f 82       	std	Y+7, r1	; 0x07
    1b6e:	18 86       	std	Y+8, r1	; 0x08
    1b70:	19 82       	std	Y+1, r1	; 0x01
    1b72:	1a 82       	std	Y+2, r1	; 0x02
    1b74:	1b 82       	std	Y+3, r1	; 0x03
    1b76:	1c 82       	std	Y+4, r1	; 0x04
    1b78:	28 c0       	rjmp	.+80     	; 0x1bca <Delay_ms+0x7e>
for(;i<value;i++)
{
	for(j=0;j<208;j++)
    1b7a:	19 82       	std	Y+1, r1	; 0x01
    1b7c:	1a 82       	std	Y+2, r1	; 0x02
    1b7e:	1b 82       	std	Y+3, r1	; 0x03
    1b80:	1c 82       	std	Y+4, r1	; 0x04
    1b82:	0f c0       	rjmp	.+30     	; 0x1ba2 <Delay_ms+0x56>
	...
    1b8c:	89 81       	ldd	r24, Y+1	; 0x01
    1b8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b90:	ab 81       	ldd	r26, Y+3	; 0x03
    1b92:	bc 81       	ldd	r27, Y+4	; 0x04
    1b94:	01 96       	adiw	r24, 0x01	; 1
    1b96:	a1 1d       	adc	r26, r1
    1b98:	b1 1d       	adc	r27, r1
    1b9a:	89 83       	std	Y+1, r24	; 0x01
    1b9c:	9a 83       	std	Y+2, r25	; 0x02
    1b9e:	ab 83       	std	Y+3, r26	; 0x03
    1ba0:	bc 83       	std	Y+4, r27	; 0x04
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
    1ba4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba6:	ab 81       	ldd	r26, Y+3	; 0x03
    1ba8:	bc 81       	ldd	r27, Y+4	; 0x04
    1baa:	80 3d       	cpi	r24, 0xD0	; 208
    1bac:	91 05       	cpc	r25, r1
    1bae:	a1 05       	cpc	r26, r1
    1bb0:	b1 05       	cpc	r27, r1
    1bb2:	40 f3       	brcs	.-48     	; 0x1b84 <Delay_ms+0x38>
void  extern Delay_ms(u32 value)
{


u32 i=0,j=0;
for(;i<value;i++)
    1bb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb8:	af 81       	ldd	r26, Y+7	; 0x07
    1bba:	b8 85       	ldd	r27, Y+8	; 0x08
    1bbc:	01 96       	adiw	r24, 0x01	; 1
    1bbe:	a1 1d       	adc	r26, r1
    1bc0:	b1 1d       	adc	r27, r1
    1bc2:	8d 83       	std	Y+5, r24	; 0x05
    1bc4:	9e 83       	std	Y+6, r25	; 0x06
    1bc6:	af 83       	std	Y+7, r26	; 0x07
    1bc8:	b8 87       	std	Y+8, r27	; 0x08
    1bca:	2d 81       	ldd	r18, Y+5	; 0x05
    1bcc:	3e 81       	ldd	r19, Y+6	; 0x06
    1bce:	4f 81       	ldd	r20, Y+7	; 0x07
    1bd0:	58 85       	ldd	r21, Y+8	; 0x08
    1bd2:	89 85       	ldd	r24, Y+9	; 0x09
    1bd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd6:	ab 85       	ldd	r26, Y+11	; 0x0b
    1bd8:	bc 85       	ldd	r27, Y+12	; 0x0c
    1bda:	28 17       	cp	r18, r24
    1bdc:	39 07       	cpc	r19, r25
    1bde:	4a 07       	cpc	r20, r26
    1be0:	5b 07       	cpc	r21, r27
    1be2:	58 f2       	brcs	.-106    	; 0x1b7a <Delay_ms+0x2e>
		    //asm("NOP");
		    //asm("NOP");
	}

}
}
    1be4:	2c 96       	adiw	r28, 0x0c	; 12
    1be6:	0f b6       	in	r0, 0x3f	; 63
    1be8:	f8 94       	cli
    1bea:	de bf       	out	0x3e, r29	; 62
    1bec:	0f be       	out	0x3f, r0	; 63
    1bee:	cd bf       	out	0x3d, r28	; 61
    1bf0:	cf 91       	pop	r28
    1bf2:	df 91       	pop	r29
    1bf4:	08 95       	ret

00001bf6 <main>:
#include "GPIO_interface.h"
#include "LCD_interface.h"
#include "avr/delay.h"

int main(void)
{
    1bf6:	df 93       	push	r29
    1bf8:	cf 93       	push	r28
    1bfa:	cd b7       	in	r28, 0x3d	; 61
    1bfc:	de b7       	in	r29, 0x3e	; 62
GPIO_VInit();
    1bfe:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_VInit>

GPIO_u8SetPortDirection(GPIO_PORTA,GPIO_PORT_OUTPUT);
    1c02:	80 e0       	ldi	r24, 0x00	; 0
    1c04:	6f ef       	ldi	r22, 0xFF	; 255
    1c06:	0e 94 91 08 	call	0x1122	; 0x1122 <GPIO_u8SetPortDirection>
//GPIO_u8SetPortDirection(GPIO_PORTD,GPIO_PORT_OUTPUT);
 GPIO_u8SetPortDirection(GPIO_PORTC,GPIO_PORT_OUTPUT);
    1c0a:	82 e0       	ldi	r24, 0x02	; 2
    1c0c:	6f ef       	ldi	r22, 0xFF	; 255
    1c0e:	0e 94 91 08 	call	0x1122	; 0x1122 <GPIO_u8SetPortDirection>
/*
GPIO_u8SetPinValue(PORTD_PIN7,GPIO_PIN_HIGH);
_delay_ms(100);
GPIO_u8SetPinValue(PORTD_PIN7,GPIO_PIN_LOW);
*/
LCD_VInitialize();
    1c12:	0e 94 5d 09 	call	0x12ba	; 0x12ba <LCD_VInitialize>

//LCD_u8SymbolDisplay(0b01000001,0,0);
LCD_WriteStringInPosition("aya", 0, 0);
    1c16:	80 e6       	ldi	r24, 0x60	; 96
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	60 e0       	ldi	r22, 0x00	; 0
    1c1c:	40 e0       	ldi	r20, 0x00	; 0
    1c1e:	0e 94 41 0b 	call	0x1682	; 0x1682 <LCD_WriteStringInPosition>
    1c22:	ff cf       	rjmp	.-2      	; 0x1c22 <main+0x2c>

00001c24 <__prologue_saves__>:
    1c24:	2f 92       	push	r2
    1c26:	3f 92       	push	r3
    1c28:	4f 92       	push	r4
    1c2a:	5f 92       	push	r5
    1c2c:	6f 92       	push	r6
    1c2e:	7f 92       	push	r7
    1c30:	8f 92       	push	r8
    1c32:	9f 92       	push	r9
    1c34:	af 92       	push	r10
    1c36:	bf 92       	push	r11
    1c38:	cf 92       	push	r12
    1c3a:	df 92       	push	r13
    1c3c:	ef 92       	push	r14
    1c3e:	ff 92       	push	r15
    1c40:	0f 93       	push	r16
    1c42:	1f 93       	push	r17
    1c44:	cf 93       	push	r28
    1c46:	df 93       	push	r29
    1c48:	cd b7       	in	r28, 0x3d	; 61
    1c4a:	de b7       	in	r29, 0x3e	; 62
    1c4c:	ca 1b       	sub	r28, r26
    1c4e:	db 0b       	sbc	r29, r27
    1c50:	0f b6       	in	r0, 0x3f	; 63
    1c52:	f8 94       	cli
    1c54:	de bf       	out	0x3e, r29	; 62
    1c56:	0f be       	out	0x3f, r0	; 63
    1c58:	cd bf       	out	0x3d, r28	; 61
    1c5a:	09 94       	ijmp

00001c5c <__epilogue_restores__>:
    1c5c:	2a 88       	ldd	r2, Y+18	; 0x12
    1c5e:	39 88       	ldd	r3, Y+17	; 0x11
    1c60:	48 88       	ldd	r4, Y+16	; 0x10
    1c62:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c64:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c66:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c68:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c6a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c6c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c6e:	b9 84       	ldd	r11, Y+9	; 0x09
    1c70:	c8 84       	ldd	r12, Y+8	; 0x08
    1c72:	df 80       	ldd	r13, Y+7	; 0x07
    1c74:	ee 80       	ldd	r14, Y+6	; 0x06
    1c76:	fd 80       	ldd	r15, Y+5	; 0x05
    1c78:	0c 81       	ldd	r16, Y+4	; 0x04
    1c7a:	1b 81       	ldd	r17, Y+3	; 0x03
    1c7c:	aa 81       	ldd	r26, Y+2	; 0x02
    1c7e:	b9 81       	ldd	r27, Y+1	; 0x01
    1c80:	ce 0f       	add	r28, r30
    1c82:	d1 1d       	adc	r29, r1
    1c84:	0f b6       	in	r0, 0x3f	; 63
    1c86:	f8 94       	cli
    1c88:	de bf       	out	0x3e, r29	; 62
    1c8a:	0f be       	out	0x3f, r0	; 63
    1c8c:	cd bf       	out	0x3d, r28	; 61
    1c8e:	ed 01       	movw	r28, r26
    1c90:	08 95       	ret

00001c92 <_exit>:
    1c92:	f8 94       	cli

00001c94 <__stop_program>:
    1c94:	ff cf       	rjmp	.-2      	; 0x1c94 <__stop_program>
